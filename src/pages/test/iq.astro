---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getLocale } from '../../utils/i18n';
import LucideIcon from '../../components/LucideIcon.astro';

const locale = getLocale('vi');

// Test data - compact and optimized
const testData = {
  meta: {
    title: "Test IQ Chu·∫©n Qu·ªëc T·∫ø",
    description: "ƒê√°nh gi√° ch·ªâ s·ªë th√¥ng minh v·ªõi 10 c√¢u h·ªèi khoa h·ªçc",
    timeLimit: 1500, // 25 minutes = 1500 seconds
    totalQuestions: 10
  },
  questions: [
    {
      type: "logic",
      question: "Trong d√£y s·ªë sau, s·ªë ti·∫øp theo l√† g√¨?\n2, 4, 8, 16, ?",
      options: ["24", "32", "30", "28"],
      correct: 1
    },
    {
      type: "pattern", 
      question: "T√¨m t·ª´ kh√°c bi·ªát:\nCh√≥, M√®o, C√°, Chim",
      options: ["Ch√≥", "M√®o", "C√°", "Chim"],
      correct: 2
    },
    {
      type: "math",
      question: "5 √°o = 100.000ƒë, th√¨ 8 √°o = ?",
      options: ["160.000ƒë", "150.000ƒë", "140.000ƒë", "180.000ƒë"],
      correct: 0
    },
    {
      type: "logic",
      question: "S√ÅCH v·ªõi ƒê·ªåC nh∆∞ NH·∫†C v·ªõi:",
      options: ["NGHE", "H√ÅT", "NH·∫¢Y", "CH∆†I"],
      correct: 0
    },
    {
      type: "pattern",
      question: "Ho√†n th√†nh d√£y: A, C, F, J, ?",
      options: ["M", "N", "O", "P"],
      correct: 2
    },
    {
      type: "spatial",
      question: "H√¨nh vu√¥ng chia 4 ph·∫ßn, t√¥ 2 ph·∫ßn = ?%",
      options: ["25%", "50%", "75%", "40%"],
      correct: 1
    },
    {
      type: "logic",
      question: "N·∫øu t·∫•t c·∫£ A l√† B, m·ªôt s·ªë B l√† C, th√¨:",
      options: ["T·∫•t c·∫£ A l√† C", "M·ªôt s·ªë A l√† C", "Kh√¥ng th·ªÉ k·∫øt lu·∫≠n", "T·∫•t c·∫£ C l√† A"],
      correct: 2
    },
    {
      type: "math", 
      question: "S·ªë ti·∫øp theo: 1, 1, 2, 3, 5, 8, ?",
      options: ["11", "13", "15", "10"],
      correct: 1
    },
    {
      type: "verbal",
      question: "T·ª´ g·∫ßn nghƒ©a v·ªõi 'TH√îNG MINH':",
      options: ["Lanh l·ª£i", "Kh√¥n ngoan", "Nhanh nh·∫πn", "Tinh t·∫ø"],
      correct: 1
    },
    {
      type: "logic",
      question: "100 ng∆∞·ªùi: 85 ƒëeo k√≠nh, 70 ƒëeo ƒë·ªìng h·ªì. √çt nh·∫•t bao nhi√™u ƒëeo c·∫£ hai?",
      options: ["55", "60", "65", "70"],
      correct: 0
    }
  ]
};
---

<BaseLayout
  title={`${testData.meta.title} - ${locale.meta.site_name}`}
  description={testData.meta.description}
>
  <!-- Test Container -->
  <section class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-cyan-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <!-- Header -->
      <div class="text-center mb-8">
        <div class="inline-flex items-center px-4 py-2 rounded-full bg-primary-100 text-primary-800 text-sm font-medium mb-4">
          <span class="mr-2">üß†</span>
          Test IQ Ch√≠nh Th·ª©c
        </div>
        
        <h1 class="text-3xl md:text-4xl font-display font-bold text-gray-900 mb-2">
          {testData.meta.title}
        </h1>
        
        <p class="text-lg text-gray-600 max-w-2xl mx-auto">
          {testData.meta.description}
        </p>
      </div>

      <!-- Test Component -->
      <div id="iq-test-container">
        <!-- React component will be mounted here -->
      </div>
      
      <!-- User Info Popup -->
      <div id="userInfoPopup" class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-50 flex items-center justify-center opacity-0 invisible transition-all duration-300">
        <div class="bg-white rounded-3xl shadow-2xl p-8 max-w-md w-full mx-4 transform scale-95 transition-transform duration-300">
          <!-- Header -->
          <div class="text-center mb-8">
            <div class="w-20 h-20 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
              <LucideIcon name="user-check" size={32} class="text-white" />
            </div>
            <h2 class="text-2xl font-bold text-gray-900 mb-2">üéâ Ch√∫c m·ª´ng!</h2>
            <p class="text-gray-600">B·∫°n ƒë√£ ho√†n th√†nh b√†i test! ƒê·ªÉ xem k·∫øt qu·∫£ chi ti·∫øt, vui l√≤ng cung c·∫•p th√¥ng tin:</p>
          </div>

          <!-- Form -->
          <form id="userInfoForm" class="space-y-6">
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-semibold text-gray-700 mb-2">
                  <LucideIcon name="user" size={16} class="inline mr-2" />
                  H·ªç v√† t√™n
                </label>
                <input 
                  type="text" 
                  id="userName" 
                  name="name" 
                  required
                  class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white"
                  placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n"
                />
              </div>

              <div>
                <label class="block text-sm font-semibold text-gray-700 mb-2">
                  <LucideIcon name="calendar" size={16} class="inline mr-2" />
                  Tu·ªïi
                </label>
                <input 
                  type="number" 
                  id="userAge" 
                  name="age" 
                  min="10" 
                  max="100" 
                  required
                  class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white"
                  placeholder="Nh·∫≠p tu·ªïi c·ªßa b·∫°n"
                />
              </div>

              <div>
                <label class="block text-sm font-semibold text-gray-700 mb-2">
                  <LucideIcon name="map-pin" size={16} class="inline mr-2" />
                  ƒê·ªãa ch·ªâ
                </label>
                <input 
                  type="text" 
                  id="userLocation" 
                  name="location" 
                  required
                  class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white"
                  placeholder="Th√†nh ph·ªë, qu·ªëc gia"
                />
              </div>
            </div>

            <!-- Submit Button -->
            <button 
              type="submit" 
              id="submitBtn"
              class="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl transform hover:scale-[1.02] transition-all duration-200 flex items-center justify-center space-x-2"
            >
              <span id="submitText">Xem k·∫øt qu·∫£</span>
              <!-- Plain SVG instead of LucideIcon -->
              <svg id="submitIcon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
              </svg>
              <!-- Loading Spinner (hidden by default) -->
              <div id="loadingSpinner" class="hidden">
                <svg class="animate-spin h-5 w-5 text-white" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </div>
            </button>
          </form>

          <!-- Privacy Note -->
          <p class="text-xs text-gray-500 text-center mt-4">
            üîí Th√¥ng tin c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o m·∫≠t v√† ch·ªâ d√πng ƒë·ªÉ c√° nh√¢n h√≥a k·∫øt qu·∫£
          </p>
        </div>
      </div>
      
      <!-- Enhanced Loading State -->
      <div id="loading-state" class="fixed inset-0 bg-gradient-to-br from-blue-50 via-white to-cyan-50 flex items-center justify-center z-50">
        <div class="text-center">
          <!-- Brain Loading Animation -->
          <div class="relative mb-8">
            <!-- Outer Ring -->
            <div class="w-24 h-24 rounded-full border-4 border-blue-200 absolute animate-ping"></div>
            <div class="w-20 h-20 rounded-full border-4 border-purple-200 absolute top-2 left-2 animate-ping animation-delay-200"></div>
            
            <!-- Brain Icon Container -->
            <div class="relative w-24 h-24 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center shadow-xl animate-pulse">
              <!-- Brain Icon -->
              <svg class="w-12 h-12 text-white animate-bounce" fill="currentColor" viewBox="0 0 24 24">
                <path d="M19.5,7C19.79,6.1 19.27,5.12 18.37,4.83C17.47,4.54 16.5,5.06 16.21,5.96L16.18,6.08C15.87,6.26 15.54,6.4 15.19,6.5C14.15,6.81 13.03,6.54 12.35,5.86L12,5.5L11.65,5.86C10.97,6.54 9.85,6.81 8.81,6.5C8.46,6.4 8.13,6.26 7.82,6.08L7.79,5.96C7.5,5.06 6.53,4.54 5.63,4.83C4.73,5.12 4.21,6.1 4.5,7C4.79,7.9 5.77,8.42 6.67,8.13L6.67,8.13C6.96,8.04 7.26,8 7.56,8C8.04,8 8.5,8.14 8.91,8.36L9.05,8.43C9.27,9.65 9.87,10.76 10.79,11.55C11.02,11.74 11.27,11.91 11.53,12.05L11.58,12.08C11.71,12.15 11.85,12.2 12,12.2C12.15,12.2 12.29,12.15 12.42,12.08L12.47,12.05C12.73,11.91 12.98,11.74 13.21,11.55C14.13,10.76 14.73,9.65 14.95,8.43L15.09,8.36C15.5,8.14 15.96,8 16.44,8C16.74,8 17.04,8.04 17.33,8.13C18.23,8.42 19.21,7.9 19.5,7Z M7,9C6.45,9 6,9.45 6,10C6,10.55 6.45,11 7,11C7.55,11 8,10.55 8,10C8,9.45 7.55,9 7,9M17,9C16.45,9 16,9.45 16,10C16,10.55 16.45,11 17,11C17.55,11 18,10.55 18,10C18,9.45 17.55,9 17,9M12,13.5C9.79,13.5 8,15.29 8,17.5S9.79,21.5 12,21.5S16,19.71 16,17.5S14.21,13.5 12,13.5Z"/>
              </svg>
              
              <!-- Rotating dots -->
              <div class="absolute inset-0 animate-spin">
                <div class="w-3 h-3 bg-yellow-400 rounded-full absolute top-0 left-1/2 transform -translate-x-1/2"></div>
                <div class="w-2 h-2 bg-green-400 rounded-full absolute top-1/2 right-0 transform -translate-y-1/2"></div>
                <div class="w-2 h-2 bg-pink-400 rounded-full absolute bottom-0 left-1/2 transform -translate-x-1/2"></div>
                <div class="w-3 h-3 bg-cyan-400 rounded-full absolute top-1/2 left-0 transform -translate-y-1/2"></div>
              </div>
            </div>
            
            <!-- Floating particles -->
            <div class="floating-particles absolute inset-0">
              <div class="particle particle-1"></div>
              <div class="particle particle-2"></div>
              <div class="particle particle-3"></div>
              <div class="particle particle-4"></div>
              <div class="particle particle-5"></div>
              <div class="particle particle-6"></div>
            </div>
          </div>
          
          <!-- Loading Text -->
          <div class="space-y-3">
            <h3 class="text-2xl font-bold text-gray-800 animate-pulse">üß† ƒêang kh·ªüi t·∫°o Test IQ</h3>
            <p class="text-gray-600 animate-fade">Chu·∫©n b·ªã nh·ªØng c√¢u h·ªèi th√°ch th·ª©c...</p>
            
            <!-- Progress dots -->
            <div class="flex justify-center space-x-2 mt-4">
              <div class="w-3 h-3 bg-blue-500 rounded-full animate-bounce"></div>
              <div class="w-3 h-3 bg-purple-500 rounded-full animate-bounce animation-delay-100"></div>
              <div class="w-3 h-3 bg-cyan-500 rounded-full animate-bounce animation-delay-200"></div>
            </div>
          </div>
        </div>
      </div>
      
    </div>
  </section>
</BaseLayout>

<script define:vars={{ testData }}>
  // Test state
  let currentQuestion = 0;
  let answers = [];
  let startTime = Date.now();
  let timer;
  let testResult = null;

  function createTestInterface() {
    const q = testData.questions[currentQuestion];
    const progress = ((currentQuestion + 1) / testData.questions.length) * 100;
    const timeElapsed = Math.floor((Date.now() - startTime) / 1000);
    const avgTimePerQuestion = currentQuestion > 0 ? Math.round(timeElapsed / currentQuestion) : 0;
    
    document.getElementById('iq-test-container').innerHTML = `
      <div class="max-w-5xl mx-auto">
        <!-- Enhanced Progress Section -->
        <div class="mb-10">
          <div class="bg-white rounded-3xl shadow-lg p-6 border border-gray-100">
            <!-- Top Stats Row -->
            <div class="flex justify-between items-center mb-6">
              <div class="flex items-center space-x-6">
                <div class="flex items-center space-x-2">
                  <div class="w-3 h-3 bg-blue-500 rounded-full animate-pulse"></div>
                  <span class="text-sm font-medium text-gray-700">C√¢u ${currentQuestion + 1}/${testData.questions.length}</span>
                </div>
                <div class="flex items-center space-x-2">
                  <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                  <span class="text-sm text-gray-600">${Math.round(progress)}% ho√†n th√†nh</span>
                </div>
                ${avgTimePerQuestion > 0 ? `
                  <div class="flex items-center space-x-2">
                    <div class="w-3 h-3 bg-purple-500 rounded-full"></div>
                    <span class="text-sm text-gray-600">${avgTimePerQuestion}s/c√¢u</span>
                  </div>
                ` : ''}
              </div>
              
              <div class="flex items-center space-x-2 bg-gray-50 px-4 py-2 rounded-xl">
                <svg class="w-5 h-5 text-orange-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                </svg>
                <span class="font-mono text-lg font-bold text-gray-800" id="time-left">25:00</span>
              </div>
            </div>
            
            <!-- Progress Bar -->
            <div class="relative">
              <div class="w-full h-3 bg-gray-200 rounded-full overflow-hidden">
                <div class="h-full bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 rounded-full transition-all duration-700 ease-out progress-bar" 
                     style="width: ${progress}%"></div>
              </div>
              <div class="absolute inset-0 flex justify-between items-center px-2">
                ${Array.from({length: testData.questions.length}, (_, i) => `
                  <div class="w-2 h-2 rounded-full ${i < currentQuestion + 1 ? 'bg-white shadow-md' : 'bg-gray-300'} transition-all duration-300"></div>
                `).join('')}
              </div>
            </div>
          </div>
        </div>

        <!-- Question Card -->
        <div class="bg-white rounded-3xl shadow-xl p-8 border border-gray-100 relative overflow-hidden">
          <!-- Background Decoration -->
          <div class="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-blue-100 to-purple-100 rounded-full opacity-50 transform translate-x-16 -translate-y-16"></div>
          <div class="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-pink-100 to-orange-100 rounded-full opacity-50 transform -translate-x-12 translate-y-12"></div>
          
          <div class="relative z-10">
            <!-- Question Header -->
            <div class="text-center mb-8">
              <div class="inline-flex items-center px-6 py-3 rounded-full bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 mb-6">
                <div class="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mr-3">
                  <span class="text-white font-bold text-sm">${currentQuestion + 1}</span>
                </div>
                <span class="text-sm font-semibold text-gray-700 uppercase tracking-wide">${q.type} ‚Ä¢ C√¢u h·ªèi ${currentQuestion + 1}</span>
              </div>
              
              <h2 class="text-3xl font-bold text-gray-900 leading-relaxed max-w-3xl mx-auto">
                ${q.question.replace(/\n/g, '<br>')}
              </h2>
            </div>

            <!-- Options Grid -->
            <div class="space-y-4 max-w-3xl mx-auto">
              ${q.options.map((option, i) => {
                const isSelected = answers[currentQuestion] === i;
                return `
                <button onclick="selectAnswer(${i})" 
                        class="option-btn group w-full p-6 text-left border-2 ${isSelected ? 'border-blue-500 bg-gradient-to-r from-blue-50 to-purple-50' : 'border-gray-200'} rounded-2xl hover:border-blue-400 hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50 transition-all duration-300 transform hover:scale-[1.02] hover:shadow-lg"
                        data-option="${i}">
                  <div class="flex items-center space-x-4">
                    <div class="w-12 h-12 ${isSelected ? 'bg-gradient-to-r from-blue-500 to-purple-600' : 'bg-gray-100'} group-hover:bg-gradient-to-r group-hover:from-blue-500 group-hover:to-purple-600 rounded-xl flex items-center justify-center transition-all duration-300">
                      <span class="text-lg font-bold ${isSelected ? 'text-white' : 'text-gray-600'} group-hover:text-white transition-colors duration-300">
                        ${String.fromCharCode(65 + i)}
                      </span>
                    </div>
                    <span class="text-lg text-gray-800 group-hover:text-gray-900 transition-colors duration-300 flex-1">
                      ${option}
                    </span>
                    <div class="w-6 h-6 border-2 ${isSelected ? 'border-blue-500' : 'border-gray-300'} group-hover:border-blue-500 rounded-full transition-all duration-300 relative">
                      <div class="w-full h-full ${isSelected ? 'bg-blue-500 scale-100' : 'bg-blue-500 scale-0'} group-hover:scale-75 rounded-full transition-transform duration-300"></div>
                    </div>
                  </div>
                </button>
              `;
              }).join('')}
            </div>
            
            <!-- Navigation -->
            ${currentQuestion > 0 ? `
              <div class="mt-8 text-center">
                <button onclick="previousQuestion()" 
                        class="inline-flex items-center px-6 py-3 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-xl transition-all duration-200">
                  <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                  C√¢u tr∆∞·ªõc
                </button>
              </div>
            ` : ''}
          </div>
        </div>

        <!-- Question Navigator -->
        <div class="mt-8 bg-white rounded-2xl shadow-md p-6">
          <h3 class="text-sm font-semibold text-gray-600 mb-4 text-center">ƒêi·ªÅu h∆∞·ªõng c√¢u h·ªèi</h3>
          <div class="flex justify-center space-x-2 flex-wrap gap-2">
            ${Array.from({length: testData.questions.length}, (_, i) => `
              <button onclick="goToQuestion(${i})" 
                      class="w-10 h-10 rounded-lg font-semibold text-sm transition-all duration-200 ${
                        i === currentQuestion 
                          ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-lg' 
                          : answers[i] !== undefined 
                            ? 'bg-green-100 text-green-700 hover:bg-green-200' 
                            : 'bg-gray-100 text-gray-500 hover:bg-gray-200'
                      }">
                ${i + 1}
              </button>
            `).join('')}
          </div>
        </div>
      </div>
    `;
  }

  function selectAnswer(optionIndex) {
    // Store answer immediately
    answers[currentQuestion] = optionIndex;
    
    // Save to localStorage for persistence
    localStorage.setItem('iq-test-answers', JSON.stringify(answers));
    
    // Quick visual feedback
    const selectedBtn = document.querySelector(`[data-option="${optionIndex}"]`);
    selectedBtn.style.transform = 'scale(0.95)';
    
    // Refresh interface to show selection
    setTimeout(() => {
      selectedBtn.style.transform = 'scale(1)';
      createTestInterface(); // This will show the selected state
      
      // Auto-advance only if it's a new selection
      if (currentQuestion < testData.questions.length - 1) {
        setTimeout(() => {
          currentQuestion++;
          createTestInterface();
        }, 800);
      } else {
        setTimeout(finishTest, 800);
      }
    }, 200);
  }

  function previousQuestion() {
    if (currentQuestion > 0) {
      currentQuestion--;
      createTestInterface();
    }
  }

  function goToQuestion(index) {
    if (index !== currentQuestion) {
      currentQuestion = index;
      createTestInterface();
    }
  }

  function updateTimer() {
    const elapsed = Math.floor((Date.now() - startTime) / 1000);
    const remaining = Math.max(0, testData.meta.timeLimit - elapsed);
    
    const minutes = Math.floor(remaining / 60);
    const seconds = remaining % 60;
    
    const timeDisplay = document.getElementById('time-left');
    if (timeDisplay) {
      timeDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
      
      // Warning color when < 5 minutes
      if (remaining < 300) {
        timeDisplay.parentElement.classList.add('text-red-500');
        timeDisplay.parentElement.classList.remove('text-gray-800');
      }
    }
    
    if (remaining <= 0) finishTest();
  }

  function finishTest() {
    clearInterval(timer);
    
    // Clear saved answers
    localStorage.removeItem('iq-test-answers');
    
    const correct = answers.filter((answer, index) => 
      answer === testData.questions[index].correct
    ).length;
    
    const accuracy = Math.round((correct / testData.questions.length) * 100);
    const iqScore = Math.min(200, Math.max(50, 100 + (correct - 5) * 10 + (accuracy > 80 ? 10 : 0)));
    
    testResult = {
      score: correct,
      iq: iqScore,
      percentile: Math.min(99, Math.max(1, Math.round((iqScore - 50) * 0.66))),
      timeSpent: Math.floor((Date.now() - startTime) / 1000),
      accuracy: accuracy
    };
    
    sessionStorage.setItem('iq-test-result', JSON.stringify(testResult));
    showUserInfoPopup();
  }

  // Popup Functions
  function showUserInfoPopup() {
    const popup = document.getElementById('userInfoPopup');
    popup.classList.remove('opacity-0', 'invisible');
    popup.querySelector('.bg-white').classList.remove('scale-95');
    popup.querySelector('.bg-white').classList.add('scale-100');
    
    // Setup form and focus first input
    setTimeout(() => {
      const form = document.getElementById('userInfoForm');
      if (form) {
        form.addEventListener('submit', handleFormSubmit);
        form.querySelector('input[name="name"]')?.focus();
      }
    }, 100);
  }

  function hideUserInfoPopup() {
    const popup = document.getElementById('userInfoPopup');
    popup.classList.add('opacity-0', 'invisible');
    popup.querySelector('.bg-white').classList.add('scale-95');
    popup.querySelector('.bg-white').classList.remove('scale-100');
  }

  // Form Submission
  function handleFormSubmit(e) {
    e.preventDefault();
    
    const submitBtn = document.getElementById('submitBtn');
    const submitText = document.getElementById('submitText');
    const submitIcon = document.getElementById('submitIcon');
    const loadingSpinner = document.getElementById('loadingSpinner');
    
    const formData = new FormData(e.target);
    const userData = {
      name: formData.get('name'),
      age: formData.get('age'),
      location: formData.get('location')
    };

    // Validate form
    if (!userData.name || !userData.age || !userData.location) {
      showToast('‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin', 'error');
      return;
    }

    // Show loading state
    submitBtn.disabled = true;
    submitText.textContent = 'ƒêang ph√¢n t√≠ch k·∫øt qu·∫£...';
    if (submitIcon) submitIcon.classList.add('hidden');
    if (loadingSpinner) loadingSpinner.classList.remove('hidden');
    
    // Process and redirect after 2 seconds
    setTimeout(() => {
      localStorage.setItem('userInfo', JSON.stringify(userData));
      
      const resultUrl = new URL('/result', window.location.origin);
      resultUrl.searchParams.set('name', userData.name);
      resultUrl.searchParams.set('age', userData.age);
      resultUrl.searchParams.set('location', userData.location);
      
      window.location.href = resultUrl.toString();
    }, 2000);
  }

  // Enhanced toast function
  function showToast(message, type = 'success') {
    const toast = document.createElement('div');
    const bgColor = type === 'success' ? '#10B981' : '#EF4444';
    
    toast.innerHTML = `
      <div class="flex items-center">
        <span>${message}</span>
      </div>
    `;
    toast.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${bgColor};
      color: white;
      padding: 16px 24px;
      border-radius: 12px;
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      z-index: 1000;
      font-weight: 500;
      animation: slideInBounce 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    `;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
  }

  function startTest() {
    document.getElementById('loading-state').style.display = 'none';
    document.getElementById('iq-test-container').style.display = 'block';
    
    // Load saved answers from localStorage
    const savedAnswers = localStorage.getItem('iq-test-answers');
    if (savedAnswers) {
      try {
        answers = JSON.parse(savedAnswers);
      } catch (e) {
        answers = [];
      }
    }
    
    startTime = Date.now();
    timer = setInterval(updateTimer, 1000);
    createTestInterface();
  }

  // Global functions
  window.selectAnswer = selectAnswer;
  window.previousQuestion = previousQuestion;
  window.goToQuestion = goToQuestion;

  // Optimized helper functions
  function addSuccessEffect(element) {
    element.classList.add('success-ripple');
    setTimeout(() => element.classList.remove('success-ripple'), 600);
  }

  function animateProgressBar() {
    const progressBar = document.querySelector('.progress-bar');
    if (progressBar) {
      progressBar.style.transition = 'width 0.7s cubic-bezier(0.4, 0, 0.2, 1)';
    }
  }

  function preloadNextQuestion() {
    // Simple optimization: prepare next question data
    if (currentQuestion < testData.questions.length - 2) {
      const nextQ = testData.questions[currentQuestion + 1];
      // Preload can be extended for images or complex content
    }
  }

  // Start test and setup form
  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(startTest, 1000);
    
    // Add smooth scrolling and performance optimizations
    document.documentElement.style.scrollBehavior = 'smooth';
    
    // Optimize rendering
    if ('requestIdleCallback' in window) {
      requestIdleCallback(() => {
        // Non-critical optimizations here
        animateProgressBar();
      });
    }
  });
</script>

<style>
  /* Test Container Optimization */
  #iq-test-container {
    min-height: 60vh;
    display: none;
  }
  
  /* Enhanced Progress Bar Animation */
  .progress-bar {
    background-size: 200% 100%;
    animation: shimmer 2s infinite;
  }
  
  @keyframes shimmer {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
  }
  
  /* Option Button Hover Effects */
  .option-btn {
    position: relative;
    overflow: hidden;
    will-change: transform;
  }
  
  .option-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    transition: left 0.5s;
  }
  
  .option-btn:hover::before {
    left: 100%;
  }
  
  /* Question Navigation Dots */
  .progress-dots {
    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1));
  }
  
  /* Enhanced Loading Animations */
  @keyframes pulse-glow {
    0%, 100% {
      box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.4);
    }
    50% {
      box-shadow: 0 0 0 10px rgba(59, 130, 246, 0);
    }
  }
  
  .animate-pulse-glow {
    animation: pulse-glow 2s infinite;
  }
  
  /* Floating Background Elements */
  .bg-decoration {
    background: radial-gradient(circle at center, rgba(59, 130, 246, 0.1) 0%, transparent 70%);
    animation: float-decoration 8s ease-in-out infinite;
  }
  
  @keyframes float-decoration {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(5deg); }
  }
  
  /* Optimized Transitions */
  * {
    box-sizing: border-box;
  }
  
  button, .option-btn {
    transform-origin: center;
    transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1),
                box-shadow 0.2s cubic-bezier(0.4, 0, 0.2, 1),
                background 0.3s ease,
                border-color 0.2s ease;
  }
  
  /* Question Type Badge Animation */
  .question-badge {
    background: linear-gradient(45deg, #3b82f6, #8b5cf6, #ec4899);
    background-size: 400% 400%;
    animation: gradient-shift 3s ease infinite;
  }
  
  @keyframes gradient-shift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
  
  /* Selection Effect */
  .option-selected {
    background: linear-gradient(135deg, #dbeafe 0%, #e0e7ff 100%);
    border-color: #3b82f6;
    box-shadow: 0 4px 20px rgba(59, 130, 246, 0.2);
  }
  
  .option-selected .radio-button {
    background: linear-gradient(135deg, #3b82f6, #8b5cf6);
    transform: scale(1);
  }
  
  /* Mobile Optimizations */
  @media (max-width: 768px) {
    .progress-stats {
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .option-btn {
      padding: 1rem;
      margin-bottom: 0.75rem;
    }
    
    .question-title {
      font-size: 1.5rem;
      line-height: 1.4;
    }
  }
  
  /* Performance Optimizations */
  .will-change-transform {
    will-change: transform;
  }
  
  .gpu-accelerated {
    transform: translateZ(0);
    backface-visibility: hidden;
  }
  
  /* Question Navigator Enhancement */
  .nav-button {
    position: relative;
    overflow: hidden;
  }
  
  .nav-button.active::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 50%;
    transform: translateX(-50%);
    width: 6px;
    height: 6px;
    background: #fff;
    border-radius: 50%;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
  }
  
  /* Timer Animation */
  .timer-pulse {
    animation: timer-beat 2s ease-in-out infinite;
  }
  
  @keyframes timer-beat {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
  }
  
  /* Success Animation for Selections */
  @keyframes success-ripple {
    0% {
      transform: scale(0);
      opacity: 1;
    }
    100% {
      transform: scale(4);
      opacity: 0;
    }
  }
  
  .success-ripple::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    background: rgba(34, 197, 94, 0.3);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    animation: success-ripple 0.6s ease-out;
  }
  
  /* Loading State Optimizations */
  .loading-overlay {
    backdrop-filter: blur(4px);
    background: rgba(255, 255, 255, 0.9);
  }
  
  /* Smooth scroll behavior */
  html {
    scroll-behavior: smooth;
  }
  
  /* Animation delays for staggered effects */
  .animation-delay-100 { animation-delay: 0.1s; }
  .animation-delay-200 { animation-delay: 0.2s; }
  .animation-delay-300 { animation-delay: 0.3s; }
  .animation-delay-400 { animation-delay: 0.4s; }
  .animation-delay-500 { animation-delay: 0.5s; }
  
  /* Floating particles optimization */
  .floating-particles {
    pointer-events: none;
    position: absolute;
    inset: 0;
    z-index: 1;
  }
  
  .particle {
    position: absolute;
    width: 4px;
    height: 4px;
    border-radius: 50%;
    animation: float 6s ease-in-out infinite;
    will-change: transform;
  }
  
  .particle-1 { background: #3B82F6; top: 10%; left: 10%; animation-delay: 0s; }
  .particle-2 { background: #8B5CF6; top: 20%; right: 15%; animation-delay: 1s; }
  .particle-3 { background: #10B981; bottom: 20%; left: 20%; animation-delay: 2s; }
  .particle-4 { background: #F59E0B; bottom: 10%; right: 10%; animation-delay: 3s; }
  .particle-5 { background: #EF4444; top: 50%; left: 5%; animation-delay: 4s; }
  .particle-6 { background: #06B6D4; top: 40%; right: 5%; animation-delay: 5s; }
  
  @keyframes float {
    0%, 100% {
      transform: translateY(0px) scale(1);
      opacity: 0.6;
    }
    33% {
      transform: translateY(-15px) scale(1.1);
      opacity: 0.8;
    }
    66% {
      transform: translateY(-25px) scale(0.9);
      opacity: 1;
    }
  }
  
  /* Enhanced fade animation */
  @keyframes fade {
    0%, 100% { opacity: 0.6; }
    50% { opacity: 1; }
  }
  
  .animate-fade {
    animation: fade 3s ease-in-out infinite;
  }
  
  /* Brain loading enhancements */
  @keyframes brain-pulse {
    0%, 100% {
      transform: scale(1);
      box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
    }
    50% {
      transform: scale(1.05);
      box-shadow: 0 0 30px rgba(139, 92, 246, 0.5);
    }
  }
  
  /* Progress flow animation */
  @keyframes progress-flow {
    0% { background-position: 0% 50%; }
    100% { background-position: 100% 50%; }
  }
  
  /* Toast optimizations */
  @keyframes slideInBounce {
    0% { transform: translateX(100%) scale(0.8); opacity: 0; }
    50% { transform: translateX(-10px) scale(1.05); opacity: 1; }
    100% { transform: translateX(0) scale(1); opacity: 1; }
  }
  
  /* Spinner optimization */
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  /* Focus and interaction improvements */
  button:focus-visible,
  .option-btn:focus-visible {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
  
  /* Reduce motion for accessibility */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }
</style>