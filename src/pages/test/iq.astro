---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getLocale } from '../../utils/i18n';

const locale = getLocale('vi');

// Test data - compact and optimized
const testData = {
  meta: {
    title: "Test IQ Chu·∫©n Qu·ªëc T·∫ø",
    description: "ƒê√°nh gi√° ch·ªâ s·ªë th√¥ng minh v·ªõi 10 c√¢u h·ªèi khoa h·ªçc",
    timeLimit: 3300,
    totalQuestions: 10
  },
  questions: [
    {
      type: "logic",
      question: "Trong d√£y s·ªë sau, s·ªë ti·∫øp theo l√† g√¨?\n2, 4, 8, 16, ?",
      options: ["24", "32", "30", "28"],
      correct: 1
    },
    {
      type: "pattern", 
      question: "T√¨m t·ª´ kh√°c bi·ªát:\nCh√≥, M√®o, C√°, Chim",
      options: ["Ch√≥", "M√®o", "C√°", "Chim"],
      correct: 2
    },
    {
      type: "math",
      question: "5 √°o = 100.000ƒë, th√¨ 8 √°o = ?",
      options: ["160.000ƒë", "150.000ƒë", "140.000ƒë", "180.000ƒë"],
      correct: 0
    },
    {
      type: "logic",
      question: "S√ÅCH v·ªõi ƒê·ªåC nh∆∞ NH·∫†C v·ªõi:",
      options: ["NGHE", "H√ÅT", "NH·∫¢Y", "CH∆†I"],
      correct: 0
    },
    {
      type: "pattern",
      question: "Ho√†n th√†nh d√£y: A, C, F, J, ?",
      options: ["M", "N", "O", "P"],
      correct: 2
    },
    {
      type: "spatial",
      question: "H√¨nh vu√¥ng chia 4 ph·∫ßn, t√¥ 2 ph·∫ßn = ?%",
      options: ["25%", "50%", "75%", "40%"],
      correct: 1
    },
    {
      type: "logic",
      question: "N·∫øu t·∫•t c·∫£ A l√† B, m·ªôt s·ªë B l√† C, th√¨:",
      options: ["T·∫•t c·∫£ A l√† C", "M·ªôt s·ªë A l√† C", "Kh√¥ng th·ªÉ k·∫øt lu·∫≠n", "T·∫•t c·∫£ C l√† A"],
      correct: 2
    },
    {
      type: "math", 
      question: "S·ªë ti·∫øp theo: 1, 1, 2, 3, 5, 8, ?",
      options: ["11", "13", "15", "10"],
      correct: 1
    },
    {
      type: "verbal",
      question: "T·ª´ g·∫ßn nghƒ©a v·ªõi 'TH√îNG MINH':",
      options: ["Lanh l·ª£i", "Kh√¥n ngoan", "Nhanh nh·∫πn", "Tinh t·∫ø"],
      correct: 1
    },
    {
      type: "logic",
      question: "100 ng∆∞·ªùi: 85 ƒëeo k√≠nh, 70 ƒëeo ƒë·ªìng h·ªì. √çt nh·∫•t bao nhi√™u ƒëeo c·∫£ hai?",
      options: ["55", "60", "65", "70"],
      correct: 0
    }
  ]
};
---

<BaseLayout
  title={`${testData.meta.title} - ${locale.meta.site_name}`}
  description={testData.meta.description}
>
  <!-- Test Container -->
  <section class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-cyan-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <!-- Header -->
      <div class="text-center mb-8">
        <div class="inline-flex items-center px-4 py-2 rounded-full bg-primary-100 text-primary-800 text-sm font-medium mb-4">
          <span class="mr-2">üß†</span>
          Test IQ Ch√≠nh Th·ª©c
        </div>
        
        <h1 class="text-3xl md:text-4xl font-display font-bold text-gray-900 mb-2">
          {testData.meta.title}
        </h1>
        
        <p class="text-lg text-gray-600 max-w-2xl mx-auto">
          {testData.meta.description}
        </p>
      </div>

      <!-- Test Component -->
      <div id="iq-test-container">
        <!-- React component will be mounted here -->
      </div>
      
      <!-- Enhanced Loading State -->
      <div id="loading-state" class="fixed inset-0 bg-gradient-to-br from-blue-50 via-white to-cyan-50 flex items-center justify-center z-50">
        <div class="text-center">
          <!-- Brain Loading Animation -->
          <div class="relative mb-8">
            <!-- Outer Ring -->
            <div class="w-24 h-24 rounded-full border-4 border-blue-200 absolute animate-ping"></div>
            <div class="w-20 h-20 rounded-full border-4 border-purple-200 absolute top-2 left-2 animate-ping animation-delay-200"></div>
            
            <!-- Brain Icon Container -->
            <div class="relative w-24 h-24 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center shadow-xl animate-pulse">
              <!-- Brain Icon -->
              <svg class="w-12 h-12 text-white animate-bounce" fill="currentColor" viewBox="0 0 24 24">
                <path d="M19.5,7C19.79,6.1 19.27,5.12 18.37,4.83C17.47,4.54 16.5,5.06 16.21,5.96L16.18,6.08C15.87,6.26 15.54,6.4 15.19,6.5C14.15,6.81 13.03,6.54 12.35,5.86L12,5.5L11.65,5.86C10.97,6.54 9.85,6.81 8.81,6.5C8.46,6.4 8.13,6.26 7.82,6.08L7.79,5.96C7.5,5.06 6.53,4.54 5.63,4.83C4.73,5.12 4.21,6.1 4.5,7C4.79,7.9 5.77,8.42 6.67,8.13L6.67,8.13C6.96,8.04 7.26,8 7.56,8C8.04,8 8.5,8.14 8.91,8.36L9.05,8.43C9.27,9.65 9.87,10.76 10.79,11.55C11.02,11.74 11.27,11.91 11.53,12.05L11.58,12.08C11.71,12.15 11.85,12.2 12,12.2C12.15,12.2 12.29,12.15 12.42,12.08L12.47,12.05C12.73,11.91 12.98,11.74 13.21,11.55C14.13,10.76 14.73,9.65 14.95,8.43L15.09,8.36C15.5,8.14 15.96,8 16.44,8C16.74,8 17.04,8.04 17.33,8.13C18.23,8.42 19.21,7.9 19.5,7Z M7,9C6.45,9 6,9.45 6,10C6,10.55 6.45,11 7,11C7.55,11 8,10.55 8,10C8,9.45 7.55,9 7,9M17,9C16.45,9 16,9.45 16,10C16,10.55 16.45,11 17,11C17.55,11 18,10.55 18,10C18,9.45 17.55,9 17,9M12,13.5C9.79,13.5 8,15.29 8,17.5S9.79,21.5 12,21.5S16,19.71 16,17.5S14.21,13.5 12,13.5Z"/>
              </svg>
              
              <!-- Rotating dots -->
              <div class="absolute inset-0 animate-spin">
                <div class="w-3 h-3 bg-yellow-400 rounded-full absolute top-0 left-1/2 transform -translate-x-1/2"></div>
                <div class="w-2 h-2 bg-green-400 rounded-full absolute top-1/2 right-0 transform -translate-y-1/2"></div>
                <div class="w-2 h-2 bg-pink-400 rounded-full absolute bottom-0 left-1/2 transform -translate-x-1/2"></div>
                <div class="w-3 h-3 bg-cyan-400 rounded-full absolute top-1/2 left-0 transform -translate-y-1/2"></div>
              </div>
            </div>
            
            <!-- Floating particles -->
            <div class="floating-particles absolute inset-0">
              <div class="particle particle-1"></div>
              <div class="particle particle-2"></div>
              <div class="particle particle-3"></div>
              <div class="particle particle-4"></div>
              <div class="particle particle-5"></div>
              <div class="particle particle-6"></div>
            </div>
          </div>
          
          <!-- Loading Text -->
          <div class="space-y-3">
            <h3 class="text-2xl font-bold text-gray-800 animate-pulse">üß† ƒêang kh·ªüi t·∫°o Test IQ</h3>
            <p class="text-gray-600 animate-fade">Chu·∫©n b·ªã nh·ªØng c√¢u h·ªèi th√°ch th·ª©c...</p>
            
            <!-- Progress dots -->
            <div class="flex justify-center space-x-2 mt-4">
              <div class="w-3 h-3 bg-blue-500 rounded-full animate-bounce"></div>
              <div class="w-3 h-3 bg-purple-500 rounded-full animate-bounce animation-delay-100"></div>
              <div class="w-3 h-3 bg-cyan-500 rounded-full animate-bounce animation-delay-200"></div>
            </div>
          </div>
        </div>
      </div>
      
    </div>
  </section>
</BaseLayout>

<script define:vars={{ testData }}>
  // Test state
  let currentQuestion = 0;
  let answers = [];
  let startTime = Date.now();
  let timer;

  function createTestInterface() {
    const q = testData.questions[currentQuestion];
    const progress = ((currentQuestion + 1) / testData.questions.length) * 100;
    
    document.getElementById('iq-test-container').innerHTML = `
      <div class="max-w-4xl mx-auto">
        <!-- Progress -->
        <div class="mb-8">
          <div class="flex justify-between text-sm text-gray-600 mb-2">
            <span>C√¢u ${currentQuestion + 1}/${testData.questions.length}</span>
            <span id="timer">‚è±Ô∏è <span id="time-left">55:00</span></span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2">
            <div class="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-500" 
                 style="width: ${progress}%"></div>
          </div>
        </div>

        <!-- Question -->
        <div class="bg-white rounded-3xl shadow-xl p-8">
          <div class="text-center mb-8">
            <div class="inline-flex items-center px-4 py-2 rounded-full bg-blue-100 text-blue-800 text-sm font-medium mb-4">
              ‚ùì ${q.type.toUpperCase()}
            </div>
            <h2 class="text-2xl font-bold text-gray-900">${q.question}</h2>
          </div>

          <!-- Options -->
          <div class="space-y-4">
            ${q.options.map((option, i) => `
              <button onclick="selectAnswer(${i})" 
                      class="w-full p-4 text-left border-2 border-gray-200 rounded-xl hover:border-blue-300 hover:bg-blue-50 transition-all duration-200 option-btn"
                      data-option="${i}">
                <span class="font-semibold text-blue-600 mr-3">${String.fromCharCode(65 + i)}.</span>
                ${option}
              </button>
            `).join('')}
          </div>
          
          ${currentQuestion > 0 ? `
            <div class="mt-6 text-center">
              <button onclick="previousQuestion()" 
                      class="px-4 py-2 text-gray-500 hover:text-gray-700 transition-colors">
                ‚Üê C√¢u tr∆∞·ªõc
              </button>
            </div>
          ` : ''}
        </div>
      </div>
    `;
  }

  function selectAnswer(optionIndex) {
    // Highlight selection
    document.querySelectorAll('.option-btn').forEach(btn => {
      btn.classList.remove('border-blue-500', 'bg-blue-100');
    });
    
    const selectedBtn = document.querySelector(`[data-option="${optionIndex}"]`);
    selectedBtn.classList.add('border-blue-500', 'bg-blue-100');
    
    // Store answer
    answers[currentQuestion] = optionIndex;
    
    // Auto advance after short delay
    setTimeout(() => {
      if (currentQuestion < testData.questions.length - 1) {
        currentQuestion++;
        createTestInterface();
      } else {
        finishTest();
      }
    }, 300);
  }

  function previousQuestion() {
    if (currentQuestion > 0) {
      currentQuestion--;
      createTestInterface();
    }
  }

  function updateTimer() {
    const elapsed = Math.floor((Date.now() - startTime) / 1000);
    const remaining = Math.max(0, testData.meta.timeLimit - elapsed);
    
    const minutes = Math.floor(remaining / 60);
    const seconds = remaining % 60;
    
    document.getElementById('time-left').textContent = 
      `${minutes}:${seconds.toString().padStart(2, '0')}`;
    
    if (remaining <= 0) finishTest();
  }

  function finishTest() {
    clearInterval(timer);
    
    const correct = answers.filter((answer, index) => 
      answer === testData.questions[index].correct
    ).length;
    
    const accuracy = Math.round((correct / testData.questions.length) * 100);
    const iqScore = Math.min(200, Math.max(50, 100 + (correct - 5) * 10 + (accuracy > 80 ? 10 : 0)));
    
    const result = {
      score: correct,
      iq: iqScore,
      percentile: Math.min(99, Math.max(1, Math.round((iqScore - 50) * 0.66))),
      timeSpent: Math.floor((Date.now() - startTime) / 1000),
      accuracy: accuracy
    };
    
    sessionStorage.setItem('iq-test-result', JSON.stringify(result));
    window.location.href = '/result';
  }

  function startTest() {
      document.getElementById('loading-state').style.display = 'none';
    document.getElementById('iq-test-container').style.display = 'block';
    
    startTime = Date.now();
    timer = setInterval(updateTimer, 1000);
    createTestInterface();
  }

  // Global functions
  window.selectAnswer = selectAnswer;
  window.previousQuestion = previousQuestion;

  // Start test
  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(startTest, 1000);
  });
</script>

<style>
  /* Ensure full height */
  #iq-test-container {
    min-height: 60vh;
    display: none;
  }
  
  /* Animation delays */
  .animation-delay-100 {
    animation-delay: 0.1s;
  }
  
  .animation-delay-200 {
    animation-delay: 0.2s;
  }
  
  .animation-delay-300 {
    animation-delay: 0.3s;
  }
  
  /* Floating particles */
  .floating-particles {
    pointer-events: none;
  }
  
  .particle {
    position: absolute;
    width: 4px;
    height: 4px;
    border-radius: 50%;
    animation: float 3s ease-in-out infinite;
  }
  
  .particle-1 {
    background: #3B82F6;
    top: 10%;
    left: 10%;
    animation-delay: 0s;
  }
  
  .particle-2 {
    background: #8B5CF6;
    top: 20%;
    right: 15%;
    animation-delay: 0.5s;
  }
  
  .particle-3 {
    background: #10B981;
    bottom: 20%;
    left: 20%;
    animation-delay: 1s;
  }
  
  .particle-4 {
    background: #F59E0B;
    bottom: 10%;
    right: 10%;
    animation-delay: 1.5s;
  }
  
  .particle-5 {
    background: #EF4444;
    top: 50%;
    left: 5%;
    animation-delay: 2s;
  }
  
  .particle-6 {
    background: #06B6D4;
    top: 40%;
    right: 5%;
    animation-delay: 2.5s;
  }
  
  @keyframes float {
    0%, 100% {
      transform: translateY(0px) scale(1);
      opacity: 0.7;
    }
    50% {
      transform: translateY(-20px) scale(1.2);
      opacity: 1;
    }
  }
  
  @keyframes fade {
    0%, 100% {
      opacity: 0.6;
    }
    50% {
      opacity: 1;
    }
  }
  
  .animate-fade {
    animation: fade 2s ease-in-out infinite;
  }
  
  /* Enhanced brain icon animation */
  @keyframes brain-pulse {
    0%, 100% {
      transform: scale(1);
      box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
    }
    50% {
      transform: scale(1.05);
      box-shadow: 0 0 30px rgba(139, 92, 246, 0.5);
    }
  }
  
  /* Loading progression */
  @keyframes progress-flow {
    0% {
      background-position: 0% 50%;
    }
    100% {
      background-position: 100% 50%;
    }
  }
</style>