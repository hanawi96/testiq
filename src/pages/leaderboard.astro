---
import BaseLayout from '../layouts/BaseLayout.astro';
import LeaderboardList from '../components/LeaderboardList.tsx';
import LeaderboardStats from '../components/LeaderboardStats.tsx';
import LocalRankingWrapper from '../components/LocalRankingWrapper.tsx';
import TopTenLeaderboard from '../components/TopTenLeaderboard.tsx';

// Ultra-fast SSR data loading with smart fallbacks
let initialData = { topTenData: [], stats: null, leaderboardData: null };

try {
  console.log('üîÑ Fetching leaderboard...');
  const backend = await import('../../backend');
  
  // Single optimized call for all data
  const [statsResult, leaderboardResult] = await Promise.all([
    backend.getQuickStats().catch(() => null),
    backend.getLeaderboard(1, 30).catch(() => null) // Get first 30 (top 10 + 20 for list)
  ]);
  
  const stats = statsResult || { 
    totalParticipants: 156, 
    highestScore: 145, 
    averageScore: 98, 
    geniusPercentage: 2.5 
  };
  
  let topTenData = [];
  let leaderboardData = null;
  
  if (leaderboardResult?.data?.length > 0) {
    // Split data: top 10 for display, rest for list component
    const allData = leaderboardResult.data.map((entry, index) => ({
      ...entry,
      rank: index + 1
    }));
    
    topTenData = allData.slice(0, 10);
    leaderboardData = {
      data: allData.filter(entry => entry.rank > 10), // List starts from rank 11
      stats,
      totalPages: leaderboardResult.totalPages || 1
    };
  } else {
    // Smart fallback with real stats - top 10 data
    topTenData = [
      { rank: 1, name: 'Nguy·ªÖn VƒÉn A', score: stats.highestScore, location: 'H√† N·ªôi', date: '2024-01-15', badge: 'genius', age: 28, gender: 'male', user_id: 'demo1' },
      { rank: 2, name: 'Tr·∫ßn Th·ªã B', score: stats.highestScore - 7, location: 'TP.HCM', date: '2024-01-14', badge: 'superior', age: 24, gender: 'female', user_id: 'demo2' },
      { rank: 3, name: 'L√™ VƒÉn C', score: stats.highestScore - 13, location: 'ƒê√† N·∫µng', date: '2024-01-13', badge: 'superior', age: 35, gender: 'male', user_id: 'demo3' },
      { rank: 4, name: 'Ph·∫°m Th·ªã D', score: stats.highestScore - 18, location: 'H·∫£i Ph√≤ng', date: '2024-01-12', badge: 'above', age: 29, gender: 'female', user_id: 'demo4' },
      { rank: 5, name: 'Ho√†ng VƒÉn E', score: stats.highestScore - 22, location: 'C·∫ßn Th∆°', date: '2024-01-11', badge: 'above', age: 31, gender: 'male', user_id: 'demo5' },
      { rank: 6, name: 'V≈© Th·ªã F', score: stats.highestScore - 26, location: 'Nha Trang', date: '2024-01-10', badge: 'above', age: 26, gender: 'female', user_id: 'demo6' },
      { rank: 7, name: 'ƒê·∫∑ng VƒÉn G', score: stats.highestScore - 30, location: 'Hu·∫ø', date: '2024-01-09', badge: 'good', age: 33, gender: 'male', user_id: 'demo7' },
      { rank: 8, name: 'B√πi Th·ªã H', score: stats.highestScore - 34, location: 'V≈©ng T√†u', date: '2024-01-08', badge: 'good', age: 27, gender: 'female', user_id: 'demo8' },
      { rank: 9, name: 'Mai VƒÉn I', score: stats.highestScore - 38, location: 'Quy Nhon', date: '2024-01-07', badge: 'good', age: 30, gender: 'male', user_id: 'demo9' },
      { rank: 10, name: 'L√Ω Th·ªã K', score: stats.highestScore - 42, location: 'Vinh', date: '2024-01-06', badge: 'good', age: 25, gender: 'female', user_id: 'demo10' }
    ];
  }
  
  initialData = { topTenData, stats, leaderboardData };
      console.log('‚úÖ Cached', initialData.topTenData.length, 'results');
  
} catch (error) {
  console.error('Failed to load leaderboard data:', error);
  // Complete fallback
  initialData = {
    topTenData: [
      { rank: 1, name: 'Nguy·ªÖn VƒÉn A', score: 145, location: 'H√† N·ªôi', date: '2024-01-15', badge: 'genius', age: 28, gender: 'male', user_id: 'demo1' },
      { rank: 2, name: 'Tr·∫ßn Th·ªã B', score: 138, location: 'TP.HCM', date: '2024-01-14', badge: 'superior', age: 24, gender: 'female', user_id: 'demo2' },
      { rank: 3, name: 'L√™ VƒÉn C', score: 132, location: 'ƒê√† N·∫µng', date: '2024-01-13', badge: 'superior', age: 35, gender: 'male', user_id: 'demo3' }
    ],
    stats: { totalParticipants: 156, highestScore: 145, averageScore: 98, geniusPercentage: 2.5 },
    leaderboardData: null
  };
}

const getBadgeInfo = (badge: string) => {
  switch(badge) {
    case 'genius': return { label: 'Thi√™n t√†i', color: 'bg-purple-500' };
    case 'superior': return { label: 'Xu·∫•t s·∫Øc', color: 'bg-blue-500' };
    case 'above': return { label: 'Tr√™n TB', color: 'bg-green-500' };
    default: return { label: 'T·ªët', color: 'bg-orange-500' };
  }
};

const getGenderIcon = (gender?: string) => {
  switch(gender) {
    case 'male': return '‚ôÇÔ∏è';
    case 'female': return '‚ôÄÔ∏è';
    case 'other': return '‚ößÔ∏è';
    default: return '';
  }
};
---

<BaseLayout
  title="B·∫£ng x·∫øp h·∫°ng IQ - Th√°ch th·ª©c tr√≠ tu·ªá"
  description="Kh√°m ph√° b·∫£ng x·∫øp h·∫°ng IQ v·ªõi nh·ªØng t√†i nƒÉng xu·∫•t s·∫Øc nh·∫•t. So s√°nh k·∫øt qu·∫£ v√† th√°ch th·ª©c b·∫£n th√¢n v·ªõi c·ªông ƒë·ªìng."
>
  <!-- Streamlined Hero Section -->
  <section class="relative bg-gradient-to-br from-slate-50 to-blue-50 pt-24 pb-12 overflow-hidden">
    <div class="absolute inset-0 bg-gradient-to-br from-yellow-400/5 to-orange-500/5"></div>
    
    <div class="relative max-w-6xl mx-auto px-4 text-center">
      <div class="w-16 h-16 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-2xl flex items-center justify-center mx-auto mb-6">
        <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
        </svg>
      </div>
      
      <h1 class="text-3xl md:text-5xl font-bold text-gray-900 mb-4">
        B·∫£ng x·∫øp h·∫°ng <span class="text-yellow-600">IQ</span>
      </h1>
      
      <p class="text-lg text-gray-600 mb-8">Kh√°m ph√° nh·ªØng t√†i nƒÉng xu·∫•t s·∫Øc nh·∫•t</p>

      <!-- Optimized Stats Component -->
      <LeaderboardStats client:load initialStats={initialData.stats} />
    </div>
  </section>

  <!-- Top 10 Leaderboard Section -->
  <section class="bg-white py-8">
    <div class="max-w-6xl mx-auto px-4">
      <TopTenLeaderboard client:load initialData={initialData.topTenData} />
    </div>
  </section>

  <!-- Local Ranking Section for Logged-in Users -->
  <section class="py-8 bg-white border-t border-gray-200">
    <div class="max-w-6xl mx-auto px-4">
      <LocalRankingWrapper client:load />
    </div>
  </section>

  <!-- Optimized Full Leaderboard -->
  <section id="full-leaderboard" class="py-8 bg-gray-50 border-t border-gray-200">
    <div class="max-w-6xl mx-auto px-4">
      <!-- Pass initial data to avoid duplicate loading -->
      <LeaderboardList client:load initialData={initialData.leaderboardData} />
    </div>
  </section>
</BaseLayout>

 