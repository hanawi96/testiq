---
import BaseLayout from '../layouts/BaseLayout.astro';
import LeaderboardList from '../components/LeaderboardList.tsx';
import LeaderboardStats from '../components/LeaderboardStats.tsx';
import LocalRankingWrapper from '../components/LocalRankingWrapper.tsx';
import TopTenLeaderboard from '../components/TopTenLeaderboard.tsx';

// ‚úÖ SUPER OPTIMIZED: Load t·∫•t c·∫£ data song song trong 1 l·∫ßn
import { getLeaderboard } from '../../backend/utils/leaderboard-service';
import { getDashboardStats } from '../../backend/utils/dashboard-stats-service';

// üöÄ PARALLEL LOADING: Load t·∫•t c·∫£ data c·∫ßn thi·∫øt song song
let dashboardStats;
let leaderboardData;
let topTenData;
let fullLeaderboardData;

try {
  console.log('‚ö° Loading all data in parallel...');
  const startTime = Date.now();
  
  // Load song song t·∫•t c·∫£ data c·∫ßn thi·∫øt
  const [statsResult, fullDataResult] = await Promise.all([
    getDashboardStats(),
    getLeaderboard(1, 600, true) // üéØ SMART: Enable full cache for frontend pagination
  ]);

  dashboardStats = statsResult;
  leaderboardData = fullDataResult;
  
  // T√°ch data cho t·ª´ng component
  topTenData = fullDataResult?.data?.slice(0, 10) || [];
  fullLeaderboardData = {
    data: fullDataResult?.data?.slice(10) || [], // B·ªè top 10, c√≤n l·∫°i 590 records
    stats: fullDataResult?.stats,
    totalPages: Math.ceil((fullDataResult?.data?.length - 10 || 0) / 15) // üî• FIX: T√≠nh ƒë√∫ng total pages
  };

  const loadTime = Date.now() - startTime;
  console.log(`‚úÖ All data loaded in ${loadTime}ms`);
  console.log(`üìä Total records: ${fullDataResult?.data?.length || 0}`);
  console.log(`üìÑ Full leaderboard pages: ${fullLeaderboardData.totalPages}`);
  
} catch (error) {
  console.error('‚ùå L·ªói load data:', error);
  dashboardStats = null;
  leaderboardData = [];
  topTenData = [];
  fullLeaderboardData = { data: [], stats: null, totalPages: 0 };
}

const getBadgeInfo = (badge: string) => {
  switch(badge) {
    case 'genius': return { label: 'Thi√™n t√†i', color: 'bg-purple-500' };
    case 'superior': return { label: 'Xu·∫•t s·∫Øc', color: 'bg-blue-500' };
    case 'above': return { label: 'Tr√™n TB', color: 'bg-green-500' };
    default: return { label: 'T·ªët', color: 'bg-orange-500' };
  }
};

const getGenderIcon = (gender?: string) => {
  switch(gender) {
    case 'male': return '‚ôÇÔ∏è';
    case 'female': return '‚ôÄÔ∏è';
    case 'other': return '‚ößÔ∏è';
    default: return '';
  }
};
---

<BaseLayout
  title="B·∫£ng x·∫øp h·∫°ng IQ - Th√°ch th·ª©c tr√≠ tu·ªá"
  description="Kh√°m ph√° b·∫£ng x·∫øp h·∫°ng IQ v·ªõi nh·ªØng t√†i nƒÉng xu·∫•t s·∫Øc nh·∫•t. So s√°nh k·∫øt qu·∫£ v√† th√°ch th·ª©c b·∫£n th√¢n v·ªõi c·ªông ƒë·ªìng."
>
  <!-- Streamlined Hero Section -->
  <section class="relative bg-gradient-to-br from-slate-50 to-blue-50 pt-24 pb-12 overflow-hidden">
    <div class="absolute inset-0 bg-gradient-to-br from-yellow-400/5 to-orange-500/5"></div>
    
    <div class="relative max-w-6xl mx-auto px-4 text-center">
      <div class="w-16 h-16 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-2xl flex items-center justify-center mx-auto mb-6">
        <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
        </svg>
      </div>
      
      <h1 class="text-3xl md:text-5xl font-bold text-gray-900 mb-4">
        B·∫£ng x·∫øp h·∫°ng <span class="text-yellow-600">IQ</span>
      </h1>
      
      <p class="text-lg text-gray-600 mb-8">Kh√°m ph√° nh·ªØng t√†i nƒÉng xu·∫•t s·∫Øc nh·∫•t</p>

      <!-- ‚úÖ INSTANT DISPLAY: C√≥ initialStats t·ª´ server -->
      <LeaderboardStats client:load initialStats={dashboardStats} />
    </div>
  </section>

  <!-- Top 10 Leaderboard Section -->
  <section class="bg-white py-8">
    <div class="max-w-6xl mx-auto px-4">
      <TopTenLeaderboard client:load initialData={topTenData} />
    </div>
  </section>

  <!-- Local Ranking Section for Logged-in Users -->
  <section class="py-8 bg-white border-t border-gray-200">
    <div class="max-w-6xl mx-auto px-4">
      <LocalRankingWrapper client:load />
    </div>
  </section>

  <!-- Optimized Full Leaderboard -->
  <section id="full-leaderboard" class="py-8 bg-gray-50 border-t border-gray-200">
    <div class="max-w-6xl mx-auto px-4">
      <!-- ‚úÖ OPTIMIZED: Pass pre-processed data -->
      <LeaderboardList client:load initialData={fullLeaderboardData} />
    </div>
  </section>
</BaseLayout>

 