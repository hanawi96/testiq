---
import BaseLayout from '../layouts/BaseLayout.astro';
import LeaderboardList from '../components/LeaderboardList.tsx';

// Get real data from backend
let topPerformers = [];
let stats = { totalParticipants: 0, highestScore: 0, averageScore: 0, geniusPercentage: 0 };

try {
  const backend = await import('../../backend');
  const result = await backend.getLeaderboard(1, 3);
  if (result.data) {
    topPerformers = result.data.map((entry, index) => ({
      ...entry,
      rank: index + 1,
      avatar: entry.name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2),
      improvement: `+${Math.floor(Math.random() * 15) + 3} điểm`,
      testCount: Math.floor(Math.random() * 20) + 5
    }));
    stats = result.stats || stats;
  }
} catch (error) {
  console.error('Failed to load leaderboard data:', error);
  // Fallback data
  topPerformers = [
    { rank: 1, name: 'Đang tải...', score: 0, location: '', date: '', badge: 'genius', avatar: '?', improvement: '', testCount: 0 }
  ];
}

const getBadgeInfo = (badge: string) => {
  switch(badge) {
    case 'genius': return { label: 'Thiên tài', color: 'bg-purple-500' };
    case 'superior': return { label: 'Xuất sắc', color: 'bg-blue-500' };
    case 'above': return { label: 'Trên TB', color: 'bg-green-500' };
    default: return { label: 'Tốt', color: 'bg-orange-500' };
  }
};
---

<BaseLayout
  title="Bảng xếp hạng IQ - Thách thức trí tuệ"
  description="Khám phá bảng xếp hạng IQ với những tài năng xuất sắc nhất. So sánh kết quả và thách thức bản thân với cộng đồng."
>
  <!-- Hero Section -->
  <section class="relative bg-gradient-to-br from-slate-50 via-white to-blue-50 pt-24 pb-16 overflow-hidden">
    <!-- Background decoration -->
    <div class="absolute inset-0 bg-grid-pattern opacity-5"></div>
    <div class="absolute top-20 right-10 w-72 h-72 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full opacity-10 blur-3xl"></div>
    <div class="absolute bottom-20 left-10 w-96 h-96 bg-gradient-to-br from-purple-400 to-pink-500 rounded-full opacity-10 blur-3xl"></div>
    
    <div class="relative max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <!-- Badge -->
      <div class="inline-flex items-center px-4 py-2 rounded-full bg-gradient-to-r from-yellow-100 to-orange-100 text-yellow-800 text-sm font-medium mb-8">
        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
        </svg>
        Bảng xếp hạng IQ
      </div>
      
      <!-- Trophy Icon -->
      <div class="w-20 h-20 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-lg">
        <svg class="w-10 h-10 text-white" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
        </svg>
      </div>
      
      <!-- Main heading -->
      <h1 class="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
        Bảng xếp hạng
        <span class="text-transparent bg-clip-text bg-gradient-to-r from-yellow-600 to-orange-600">
          IQ
        </span>
      </h1>
      
      <!-- Subtitle -->
      <p class="text-xl md:text-2xl text-gray-600 font-medium mb-4">
        Khám phá những tài năng xuất sắc nhất
      </p>
      
      <p class="text-lg text-gray-500 max-w-2xl mx-auto mb-8">
        So sánh kết quả của bạn với cộng đồng và thách thức bản thân để đạt vị trí cao hơn
      </p>

      <!-- Quick Stats -->
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto">
        <div class="bg-white bg-opacity-80 backdrop-blur-sm rounded-2xl p-4 border border-gray-200">
          <div class="text-2xl font-bold text-blue-600 mb-1">{stats.totalParticipants.toLocaleString()}</div>
          <div class="text-sm text-gray-600">Người tham gia</div>
        </div>
        <div class="bg-white bg-opacity-80 backdrop-blur-sm rounded-2xl p-4 border border-gray-200">
          <div class="text-2xl font-bold text-purple-600 mb-1">{stats.highestScore}</div>
          <div class="text-sm text-gray-600">Điểm cao nhất</div>
        </div>
        <div class="bg-white bg-opacity-80 backdrop-blur-sm rounded-2xl p-4 border border-gray-200">
          <div class="text-2xl font-bold text-green-600 mb-1">{stats.averageScore}</div>
          <div class="text-sm text-gray-600">Điểm trung bình</div>
        </div>
        <div class="bg-white bg-opacity-80 backdrop-blur-sm rounded-2xl p-4 border border-gray-200">
          <div class="text-2xl font-bold text-orange-600 mb-1">{stats.geniusPercentage}%</div>
          <div class="text-sm text-gray-600">Thiên tài</div>
        </div>
      </div>
    </div>
  </section>

  <!-- Top Performers -->
  <section class="bg-white">
    <div class="max-w-6xl mx-auto px-4 pt-8 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-gray-900 mb-4">Top 3 xuất sắc nhất</h2>
        <p class="text-gray-600">Những người dẫn đầu bảng xếp hạng IQ</p>
      </div>

      <div class="grid md:grid-cols-3 gap-8">
        {topPerformers.map((performer, index) => {
          const badgeInfo = getBadgeInfo(performer.badge);
          const isFirst = index === 0;
          
          return (
            <div class={`group relative bg-gradient-to-br ${
              isFirst ? 'from-yellow-50 to-orange-50 border-2 border-yellow-200' : 
              'from-gray-50 to-blue-50 border border-gray-200'
            } rounded-2xl p-6 hover:shadow-lg transition-all duration-200`}>
              
              {/* Rank Badge */}
              <div class="absolute -top-4 left-6">
                <div class={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-md ${
                  performer.rank === 1 ? 'bg-gradient-to-br from-yellow-400 to-yellow-600' : 
                  performer.rank === 2 ? 'bg-gradient-to-br from-gray-400 to-gray-600' : 
                  'bg-gradient-to-br from-amber-500 to-amber-700'
                }`}>
                  #{performer.rank}
                </div>
              </div>

              {/* Avatar */}
              <div class="flex items-center space-x-4 mb-4">
                <div class="w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-2xl flex items-center justify-center shadow-md">
                  <span class="text-white font-bold text-xl">{performer.avatar}</span>
                </div>
                <div class="flex-1">
                  <h3 class="text-lg font-bold text-gray-900">{performer.name}</h3>
                  <div class="flex items-center space-x-2 text-sm text-gray-500">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                    </svg>
                    <span>{performer.location}</span>
                  </div>
                </div>
              </div>

              {/* Stats */}
              <div class="space-y-3">
                <div class="flex items-center justify-between">
                  <span class="text-gray-600">Điểm IQ</span>
                  <span class="text-2xl font-bold text-indigo-600">{performer.score}</span>
                </div>
                
                <div class="flex items-center justify-between">
                  <span class="text-gray-600">Cải thiện</span>
                  <span class="text-green-600 font-medium">{performer.improvement}</span>
                </div>
                
                <div class="flex items-center justify-between">
                  <span class="text-gray-600">Số test</span>
                  <span class="text-gray-900 font-medium">{performer.testCount}</span>
                </div>
              </div>

              {/* Badge */}
              <div class="mt-4 pt-4 border-t border-gray-200">
                <span class={`inline-flex px-3 py-1 rounded-full text-xs font-medium text-white ${badgeInfo.color}`}>
                  {badgeInfo.label}
                </span>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  </section>

  <!-- Full Leaderboard -->
  <section class="py-16 bg-gray-50">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">


      <!-- Leaderboard Component -->
      <LeaderboardList client:load />
    </div>
  </section>


</BaseLayout>

<style>
  /* Grid pattern background */
  .bg-grid-pattern {
    background-image: 
      linear-gradient(to right, #e5e7eb 1px, transparent 1px),
      linear-gradient(to bottom, #e5e7eb 1px, transparent 1px);
    background-size: 20px 20px;
  }
  
  /* Modern animations */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(40px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
  
  @keyframes slideInLeft {
    from {
      opacity: 0;
      transform: translateX(-30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  @keyframes slideInRight {
    from {
      opacity: 0;
      transform: translateX(30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  @keyframes scaleIn {
    from {
      opacity: 0;
      transform: scale(0.8);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
  
  @keyframes shimmer {
    0% {
      background-position: -200px 0;
    }
    100% {
      background-position: calc(200px + 100%) 0;
    }
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
  
  @keyframes bounce {
    0%, 20%, 53%, 80%, 100% {
      transform: translate3d(0, 0, 0);
    }
    40%, 43% {
      transform: translate3d(0, -8px, 0);
    }
    70% {
      transform: translate3d(0, -4px, 0);
    }
    90% {
      transform: translate3d(0, -2px, 0);
    }
  }
  
  /* Glassmorphism effects */
  .glass-effect {
    background: rgba(255, 255, 255, 0.25);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.18);
  }
  
  .glass-effect-strong {
    background: rgba(255, 255, 255, 0.35);
    backdrop-filter: blur(15px);
    -webkit-backdrop-filter: blur(15px);
    border: 1px solid rgba(255, 255, 255, 0.25);
  }
  
  /* Smooth scrolling */
  html {
    scroll-behavior: smooth;
  }
  
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.1);
    border-radius: 10px;
  }
  
  ::-webkit-scrollbar-thumb {
    background: linear-gradient(45deg, #3b82f6, #8b5cf6);
    border-radius: 10px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(45deg, #2563eb, #7c3aed);
  }
  
  /* Enhanced hover effects */
  .hover-lift {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .hover-lift:hover {
    transform: translateY(-4px);
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
  
  /* Text gradient effects */
  .text-gradient {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .text-gradient-blue {
    background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 50%, #6366f1 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  /* Loading shimmer effect */
  .shimmer {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200px 100%;
    animation: shimmer 1.5s infinite;
  }
  
  /* Floating elements */
  .float {
    animation: float 3s ease-in-out infinite;
  }
  
  @keyframes float {
    0%, 100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-10px);
    }
  }
  
  /* Smooth transitions for all interactive elements */
  * {
    transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease, box-shadow 0.2s ease;
  }
  
  /* Focus styles for accessibility */
  button:focus,
  a:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
  
  /* Enhanced button styles */
  .btn-modern {
    position: relative;
    overflow: hidden;
    transform: perspective(1px) translateZ(0);
  }
  
  .btn-modern::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }
  
  .btn-modern:hover::before {
    left: 100%;
  }
  
  /* Responsive design enhancements */
  @media (max-width: 768px) {
    .fade-in-up {
      animation-duration: 0.4s;
    }
  }
  
  /* Print styles */
  @media print {
    .no-print {
      display: none !important;
    }
  }
</style>

<script>
  // Enhanced scroll animations with Intersection Observer
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry, index) => {
      if (entry.isIntersecting) {
        setTimeout(() => {
          entry.target.classList.add('fade-in-up');
          
          // Add staggered animation for list items
          if (entry.target.classList.contains('leaderboard-item')) {
            entry.target.style.animationDelay = `${index * 100}ms`;
          }
        }, index * 50);
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);
  
  // Observe sections and elements
  document.addEventListener('DOMContentLoaded', () => {
    // Observe main sections
    document.querySelectorAll('section > div').forEach(el => {
      observer.observe(el);
    });
    
    // Observe leaderboard items
    document.querySelectorAll('.leaderboard-item').forEach(el => {
      observer.observe(el);
    });
    
    // Add smooth scroll behavior for pagination
    document.querySelectorAll('[data-scroll-target]').forEach(button => {
      button.addEventListener('click', (e) => {
        const target = document.querySelector(e.target.dataset.scrollTarget);
        if (target) {
          target.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      });
    });
    
    // Add loading state improvements
    const loadingElements = document.querySelectorAll('.loading-skeleton');
    loadingElements.forEach((el, index) => {
      el.style.animationDelay = `${index * 100}ms`;
    });
    
    // Enhanced hover effects for interactive elements
    document.querySelectorAll('.hover-enhance').forEach(el => {
      el.addEventListener('mouseenter', () => {
        el.style.transform = 'translateY(-2px) scale(1.02)';
      });
      
      el.addEventListener('mouseleave', () => {
        el.style.transform = 'translateY(0) scale(1)';
      });
    });
  });
  
  // Performance optimization: Debounced scroll handler
  let scrollTimeout;
  window.addEventListener('scroll', () => {
    if (scrollTimeout) {
      clearTimeout(scrollTimeout);
    }
    
    scrollTimeout = setTimeout(() => {
      // Add scroll-based animations here if needed
      const scrolled = window.pageYOffset;
      const parallax = document.querySelectorAll('.parallax-element');
      
      parallax.forEach(el => {
        const speed = el.dataset.speed || 0.5;
        el.style.transform = `translateY(${scrolled * speed}px)`;
      });
    }, 10);
  });
  
  // Add touch gesture support for mobile
  if ('ontouchstart' in window) {
    document.addEventListener('touchstart', () => {
      document.body.classList.add('touch-device');
    });
  }
  
  // Preload critical images for better performance
  const preloadImages = [
    // Add any critical images here
  ];
  
  preloadImages.forEach(src => {
    const img = new Image();
    img.src = src;
  });
</script> 