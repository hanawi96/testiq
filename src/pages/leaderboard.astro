---
import BaseLayout from '../layouts/BaseLayout.astro';
import LeaderboardList from '../components/LeaderboardList.tsx';
import LeaderboardStats from '../components/LeaderboardStats.tsx';
import LocalRankingWrapper from '../components/LocalRankingWrapper.tsx';

// Ultra-fast SSR data loading with smart fallbacks
let initialData = { topPerformers: [], stats: null, leaderboardData: null };

try {
  console.log('üîÑ Fetching leaderboard...');
  const backend = await import('../../backend');
  
  // Single optimized call for all data
  const [statsResult, leaderboardResult] = await Promise.all([
    backend.getQuickStats().catch(() => null),
    backend.getLeaderboard(1, 23).catch(() => null) // Get first 23 (top 3 + 20 for list)
  ]);
  
  const stats = statsResult || { 
    totalParticipants: 156, 
    highestScore: 145, 
    averageScore: 98, 
    geniusPercentage: 2.5 
  };
  
  let topPerformers = [];
  let leaderboardData = null;
  
  if (leaderboardResult?.data?.length > 0) {
    // Split data: top 3 for display, rest for list component
    const allData = leaderboardResult.data.map((entry, index) => ({
      ...entry,
      rank: index + 1,
      avatar: entry.name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2),
      improvement: `+${Math.floor(Math.random() * 15) + 3} ƒëi·ªÉm`,
      testCount: Math.floor(Math.random() * 20) + 5
    }));
    
    topPerformers = allData.slice(0, 3);
    leaderboardData = {
      data: allData,
      stats,
      totalPages: leaderboardResult.totalPages || 1
    };
  } else {
    // Smart fallback with real stats
    topPerformers = [
      { rank: 1, name: 'Nguy·ªÖn VƒÉn A', score: stats.highestScore, location: 'H√† N·ªôi', date: '2024-01-15', badge: 'genius', avatar: 'NV', improvement: '+12 ƒëi·ªÉm', testCount: 8 },
      { rank: 2, name: 'Tr·∫ßn Th·ªã B', score: stats.highestScore - 7, location: 'TP.HCM', date: '2024-01-14', badge: 'superior', avatar: 'TT', improvement: '+8 ƒëi·ªÉm', testCount: 6 },
      { rank: 3, name: 'L√™ VƒÉn C', score: stats.highestScore - 13, location: 'ƒê√† N·∫µng', date: '2024-01-13', badge: 'superior', avatar: 'LV', improvement: '+15 ƒëi·ªÉm', testCount: 10 }
    ];
  }
  
  initialData = { topPerformers, stats, leaderboardData };
  console.log('‚úÖ Cached', initialData.topPerformers.length, 'results');
  
} catch (error) {
  console.error('Failed to load leaderboard data:', error);
  // Complete fallback
  initialData = {
    topPerformers: [
      { rank: 1, name: 'Nguy·ªÖn VƒÉn A', score: 145, location: 'H√† N·ªôi', date: '2024-01-15', badge: 'genius', avatar: 'NV', improvement: '+12 ƒëi·ªÉm', testCount: 8 },
      { rank: 2, name: 'Tr·∫ßn Th·ªã B', score: 138, location: 'TP.HCM', date: '2024-01-14', badge: 'superior', avatar: 'TT', improvement: '+8 ƒëi·ªÉm', testCount: 6 },
      { rank: 3, name: 'L√™ VƒÉn C', score: 132, location: 'ƒê√† N·∫µng', date: '2024-01-13', badge: 'superior', avatar: 'LV', improvement: '+15 ƒëi·ªÉm', testCount: 10 }
    ],
    stats: { totalParticipants: 156, highestScore: 145, averageScore: 98, geniusPercentage: 2.5 },
    leaderboardData: null
  };
}

const getBadgeInfo = (badge: string) => {
  switch(badge) {
    case 'genius': return { label: 'Thi√™n t√†i', color: 'bg-purple-500' };
    case 'superior': return { label: 'Xu·∫•t s·∫Øc', color: 'bg-blue-500' };
    case 'above': return { label: 'Tr√™n TB', color: 'bg-green-500' };
    default: return { label: 'T·ªët', color: 'bg-orange-500' };
  }
};

const getGenderIcon = (gender?: string) => {
  switch(gender) {
    case 'male': return '‚ôÇÔ∏è';
    case 'female': return '‚ôÄÔ∏è';
    case 'other': return '‚ößÔ∏è';
    default: return '';
  }
};
---

<BaseLayout
  title="B·∫£ng x·∫øp h·∫°ng IQ - Th√°ch th·ª©c tr√≠ tu·ªá"
  description="Kh√°m ph√° b·∫£ng x·∫øp h·∫°ng IQ v·ªõi nh·ªØng t√†i nƒÉng xu·∫•t s·∫Øc nh·∫•t. So s√°nh k·∫øt qu·∫£ v√† th√°ch th·ª©c b·∫£n th√¢n v·ªõi c·ªông ƒë·ªìng."
>
  <!-- Streamlined Hero Section -->
  <section class="relative bg-gradient-to-br from-slate-50 to-blue-50 pt-24 pb-12 overflow-hidden">
    <div class="absolute inset-0 bg-gradient-to-br from-yellow-400/5 to-orange-500/5"></div>
    
    <div class="relative max-w-6xl mx-auto px-4 text-center">
      <div class="w-16 h-16 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-2xl flex items-center justify-center mx-auto mb-6">
        <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
        </svg>
      </div>
      
      <h1 class="text-3xl md:text-5xl font-bold text-gray-900 mb-4">
        B·∫£ng x·∫øp h·∫°ng <span class="text-yellow-600">IQ</span>
      </h1>
      
      <p class="text-lg text-gray-600 mb-8">Kh√°m ph√° nh·ªØng t√†i nƒÉng xu·∫•t s·∫Øc nh·∫•t</p>

      <!-- Optimized Stats Component -->
      <LeaderboardStats client:load initialStats={initialData.stats} />
    </div>
  </section>

  <!-- Streamlined Top 3 Section -->
  <section class="bg-white py-12">
    <div class="max-w-6xl mx-auto px-4">
      <div class="text-center mb-8">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Top 3 xu·∫•t s·∫Øc nh·∫•t</h2>
        <p class="text-gray-600">Nh·ªØng ng∆∞·ªùi d·∫´n ƒë·∫ßu b·∫£ng x·∫øp h·∫°ng IQ</p>
      </div>

      <div class="grid md:grid-cols-3 gap-6">
        {initialData.topPerformers.map((performer, index) => {
          const badgeInfo = getBadgeInfo(performer.badge);
          const isFirst = index === 0;
          
          return (
            <div class={`group relative bg-gradient-to-br ${
              isFirst ? 'from-yellow-50 to-orange-50 border-2 border-yellow-200' : 
              'from-gray-50 to-blue-50 border border-gray-200'
            } rounded-2xl p-6 hover:shadow-lg transition-all duration-200`}>
              
              {/* Rank Badge */}
              <div class="absolute -top-3 left-6">
                <div class={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm ${
                  performer.rank === 1 ? 'bg-gradient-to-br from-yellow-400 to-yellow-600' : 
                  performer.rank === 2 ? 'bg-gradient-to-br from-gray-400 to-gray-600' : 
                  'bg-gradient-to-br from-amber-500 to-amber-700'
                }`}>
                  #{performer.rank}
                </div>
              </div>

              {/* User Info */}
              <div class="flex items-center space-x-4 mb-4">
                <div class="w-14 h-14 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-2xl flex items-center justify-center">
                  <span class="text-white font-bold text-lg">{performer.avatar}</span>
                </div>
                <div class="flex-1">
                  <div class="flex items-center space-x-2">
                    <h3 class="text-lg font-bold text-gray-900">{performer.name}</h3>
                    {getGenderIcon(performer.gender) && (
                      <span class="text-sm" title={`Gi·ªõi t√≠nh: ${performer.gender === 'male' ? 'Nam' : performer.gender === 'female' ? 'N·ªØ' : 'Kh√°c'}`}>
                        {getGenderIcon(performer.gender)}
                      </span>
                    )}
                  </div>
                  <div class="flex items-center text-sm text-gray-500">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                    </svg>
                    <span>{performer.location}</span>
                  </div>
                </div>
              </div>

              {/* Stats */}
              <div class="space-y-3">
                <div class="flex items-center justify-between">
                  <span class="text-gray-600">ƒêi·ªÉm IQ</span>
                  <span class="text-2xl font-bold text-indigo-600">{performer.score}</span>
                </div>
                
                <div class="flex items-center justify-between">
                  <span class="text-gray-600">C·∫£i thi·ªán</span>
                  <span class="text-green-600 font-medium">{performer.improvement}</span>
                </div>
                
                <div class="flex items-center justify-between">
                  <span class="text-gray-600">S·ªë test</span>
                  <span class="text-gray-900 font-medium">{performer.testCount}</span>
                </div>
              </div>

              {/* Badge */}
              <div class="mt-4 pt-4 border-t border-gray-200">
                <span class={`inline-flex px-3 py-1 rounded-full text-xs font-medium text-white ${badgeInfo.color}`}>
                  {badgeInfo.label}
                </span>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  </section>

  <!-- Local Ranking Section for Logged-in Users -->
  <section class="py-12 bg-white border-t border-gray-200">
    <div class="max-w-6xl mx-auto px-4">
      <div class="text-center mb-8">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">V·ªã tr√≠ c·ªßa b·∫°n</h2>
        <p class="text-gray-600">Xem v·ªã tr√≠ c√° nh√¢n v√† nh·ªØng ng∆∞·ªùi xung quanh b·∫°n</p>
      </div>
             <LocalRankingWrapper client:load />
    </div>
  </section>

  <!-- Optimized Full Leaderboard -->
  <section id="full-leaderboard" class="py-12 bg-gray-50">
    <div class="max-w-6xl mx-auto px-4">
      <div class="text-center mb-8">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">B·∫£ng x·∫øp h·∫°ng to√†n b·ªô</h2>
        <p class="text-gray-600">Danh s√°ch chi ti·∫øt t·∫•t c·∫£ ng∆∞·ªùi tham gia</p>
      </div>
      <!-- Pass initial data to avoid duplicate loading -->
      <LeaderboardList client:load initialData={initialData.leaderboardData} />
    </div>
  </section>
</BaseLayout>

 