---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { BlogService } from '../../services/blog-service';

const POSTS_PER_PAGE = 9;

export async function getStaticPaths() {
  const POSTS_PER_PAGE = 9;

  // Lấy tất cả data trong 1 lần gọi
  const { featuredArticles, regularArticles } = await BlogService.getBlogData();

  // Tính số trang cần thiết cho regular articles
  const totalPages = Math.ceil(regularArticles.length / POSTS_PER_PAGE);
  
  // Generate paths cho từng trang
  const paths = [];
  for (let page = 1; page <= totalPages; page++) {
    const startIndex = (page - 1) * POSTS_PER_PAGE;
    const endIndex = startIndex + POSTS_PER_PAGE;
    const pageArticles = regularArticles.slice(startIndex, endIndex);
    
    paths.push({
      params: { page: page.toString() },
      props: {
        articles: pageArticles,
        featuredArticles: page === 1 ? featuredArticles : [], // Chỉ hiển thị featured ở trang 1
        currentPage: page,
        totalPages,
        totalArticles: regularArticles.length
      }
    });
  }
  
  return paths;
}

const { articles, featuredArticles, currentPage, totalPages, totalArticles } = Astro.props;

// Get categories từ cache (đã được load trong getStaticPaths)
const categories = await BlogService.getCategories();

// Helper function to get category color
const getCategoryColor = (category: string) => {
  const colors = {
    'Khoa học': 'bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300',
    'Tâm lý học': 'bg-purple-100 text-purple-700 dark:bg-purple-900/30 dark:text-purple-300',
    'Kỹ thuật': 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300',
    'Sức khỏe': 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300',
    'Dinh dưỡng': 'bg-orange-100 text-orange-700 dark:bg-orange-900/30 dark:text-orange-300',
    'Công nghệ': 'bg-indigo-100 text-indigo-700 dark:bg-indigo-900/30 dark:text-indigo-300',
    'Tâm linh': 'bg-pink-100 text-pink-700 dark:bg-pink-900/30 dark:text-pink-300',
    'Giải trí': 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-300',
    'Tương lai': 'bg-cyan-100 text-cyan-700 dark:bg-cyan-900/30 dark:text-cyan-300'
  };
  return colors[category] || 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300';
};

const pageTitle = currentPage === 1 ? 'Blog - IQ Test' : `Blog - Trang ${currentPage} - IQ Test`;
---

<BaseLayout title={pageTitle} description="Khám phá các bài viết về trí thông minh, tâm lý học và phát triển bản thân">
  <!-- Hero Section -->
  <section class="bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/30 py-16">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6">
        Blog IQ Test
      </h1>
      <p class="text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-3xl mx-auto">
        Khám phá những bài viết chất lượng về trí thông minh, tâm lý học và phương pháp phát triển bản thân
      </p>
      
      <!-- Category Filter -->
      <div class="flex flex-wrap justify-center gap-3 mb-8">
        <button class="category-btn px-4 py-2 rounded-lg text-sm font-medium bg-blue-500 text-white dark:bg-blue-600 dark:text-white">
          Tất cả
        </button>
        {categories.map(category => (
          <button class={`category-btn px-4 py-2 rounded-lg text-sm font-medium ${getCategoryColor(category)}`}>
            {category}
          </button>
        ))}
      </div>
    </div>
  </section>

  <!-- Featured Post (chỉ hiển thị ở trang 1) -->
  {featuredArticles.map(post => (
    <section class="py-16 bg-white dark:bg-gray-800">
      <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-2xl overflow-hidden border border-blue-100 dark:border-blue-900/50">
          <div class="grid md:grid-cols-2 gap-0">
            <!-- Content -->
            <div class="p-8 md:p-12 flex flex-col justify-center">
              <div class="mb-4">
                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300 mb-4">
                  <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                  </svg>
                  Bài viết nổi bật
                </span>
              </div>
              
              <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4 leading-tight">
                {post.title}
              </h2>
              
              <p class="text-gray-600 dark:text-gray-300 mb-6 text-lg leading-relaxed">
                {post.excerpt}
              </p>
              
              <div class="flex items-center mb-6">
                <div class="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold text-sm mr-3">
                  {post.authorAvatar}
                </div>
                <div>
                  <p class="font-medium text-gray-900 dark:text-white">{post.author}</p>
                  <p class="text-sm text-gray-600 dark:text-gray-400">{post.date} • {post.readTime}</p>
                </div>
              </div>
              
              <div>
                <a href={`/blog/${post.slug}`} class="inline-flex items-center px-5 py-3 rounded-xl bg-blue-600 text-white text-sm font-semibold hover:bg-blue-700">
                  Đọc tiếp
                  <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                  </svg>
                </a>
              </div>
            </div>
            
            <!-- Image -->
            <div class="relative">
              <div class="absolute inset-0 bg-gradient-to-br from-blue-400/20 to-purple-500/20 opacity-60 md:opacity-100 dark:from-blue-500/30 dark:to-purple-600/30"></div>
              <img 
                src={post.image || 'https://via.placeholder.com/800x600'} 
                alt={post.title}
                class="w-full h-full object-cover md:h-full md:min-h-[400px]"
              />
            </div>
          </div>
        </div>
      </div>
    </section>
  ))}

  <!-- Regular Posts Grid -->
  <section class="py-16 bg-gray-50 dark:bg-gray-900">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-between mb-8">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white">
          {currentPage === 1 ? 'Bài viết mới nhất' : `Trang ${currentPage}`}
        </h2>
        <p class="text-gray-600 dark:text-gray-400">
          Hiển thị {((currentPage - 1) * POSTS_PER_PAGE) + 1}-{Math.min(currentPage * POSTS_PER_PAGE, totalArticles)} trong {totalArticles} bài viết
        </p>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {articles.map(post => (
          <a href={`/blog/${post.slug}`} class="group bg-white dark:bg-gray-800 rounded-xl overflow-hidden shadow-sm hover:shadow-md border border-gray-100 dark:border-gray-700 flex flex-col">
            <!-- Post Image -->
            <div class="relative h-48 overflow-hidden">
              <div class="absolute inset-0 bg-gradient-to-br from-blue-400/10 to-purple-500/10 group-hover:opacity-75 dark:from-blue-500/20 dark:to-purple-600/20"></div>
              <img 
                src={post.image || 'https://via.placeholder.com/400x240'} 
                alt={post.title} 
                class="w-full h-full object-cover"
              />
              <div class="absolute top-3 left-3">
                <span class={`px-2 py-1 rounded-lg text-xs font-medium ${getCategoryColor(post.category)}`}>
                  {post.category}
                </span>
              </div>
            </div>
            
            <!-- Post Content -->
            <div class="p-6 flex-1 flex flex-col">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 line-clamp-2">
                {post.title}
              </h3>
              
              <p class="text-gray-600 dark:text-gray-300 text-sm mb-4 flex-1 line-clamp-3">
                {post.excerpt}
              </p>
              
              <div class="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400">
                <div class="flex items-center">
                  <div class="w-6 h-6 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-xs font-semibold mr-2">
                    {post.authorAvatar}
                  </div>
                  <span>{post.author}</span>
                </div>
                <div class="flex items-center space-x-3">
                  <span>{post.date}</span>
                  <span>•</span>
                  <span>{post.readTime}</span>
                </div>
              </div>
            </div>
          </a>
        ))}
      </div>

      <!-- Pagination -->
      {totalPages > 1 && (
        <div class="flex items-center justify-center mt-12 space-x-2">
          <!-- Previous Button -->
          {currentPage > 1 && (
            <a 
              href={currentPage === 2 ? '/blog' : `/blog/page_${currentPage - 1}`}
              class="px-4 py-2 rounded-lg bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
            >
              ← Trước
            </a>
          )}

          <!-- Page Numbers -->
          {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
            <a 
              href={page === 1 ? '/blog' : `/blog/page_${page}`}
              class={`px-4 py-2 rounded-lg transition-colors ${
                page === currentPage
                  ? 'bg-blue-600 text-white'
                  : 'bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'
              }`}
            >
              {page}
            </a>
          ))}

          <!-- Next Button -->
          {currentPage < totalPages && (
            <a 
              href={`/blog/page_${currentPage + 1}`}
              class="px-4 py-2 rounded-lg bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
            >
              Tiếp →
            </a>
          )}
        </div>
      )}
    </div>
  </section>

  <!-- Blog Tags -->
  <section class="py-16 bg-gray-50 dark:bg-gray-900">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-8 text-center">
        Chủ đề phổ biến
      </h2>
      
      <div class="flex flex-wrap justify-center gap-3">
        {[...new Set(articles.flatMap(post => post.tags))].map(tag => (
          <a href={`/blog/tag/${tag}`} class="px-4 py-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg text-gray-700 dark:text-gray-300 text-sm hover:bg-gray-50 dark:hover:bg-gray-700">
            #{tag}
          </a>
        ))}
      </div>
    </div>
  </section>
</BaseLayout>

<script>
  // Category filter functionality
  const categoryButtons = document.querySelectorAll('.category-btn');
  
  categoryButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Update active button
      categoryButtons.forEach(btn => {
        btn.classList.remove('bg-blue-500', 'text-white', 'dark:bg-blue-600', 'dark:text-white');
        btn.classList.add('bg-gray-100', 'text-gray-700', 'dark:bg-gray-700', 'dark:text-gray-300');
      });
      
      button.classList.remove('bg-gray-100', 'text-gray-700', 'dark:bg-gray-700', 'dark:text-gray-300');
      button.classList.add('bg-blue-500', 'text-white', 'dark:bg-blue-600', 'dark:text-white');
      
      // Filter logic would go here when connected to real data
      console.log('Filter by:', button.textContent);
    });
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
