---
// Server-side rendering for real-time updates
export const prerender = false;

import BaseLayout from '../../layouts/BaseLayout.astro';
import { BlogService } from '../../services/blog-service';
import ArticleViewScript from '../../components/article/ArticleViewScript.astro';
import SocialLinks from '../../components/common/SocialLinks.astro';
import '../../styles/article-page.css';

const { slug } = Astro.params;

// Set headers to prevent caching for real-time updates
Astro.response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
Astro.response.headers.set('Pragma', 'no-cache');
Astro.response.headers.set('Expires', '0');

// Fetch article data on each request for real-time updates
let article = null;
let relatedArticles = [];
try {
  const allArticles = await BlogService.getPublishedArticles();
  article = allArticles.find(a => a.slug === slug);

  // Get related articles (same category, exclude current)
  if (article) {
    relatedArticles = allArticles
      .filter(a => a.id !== article.id && a.category === article.category)
      .slice(0, 3);
  }
} catch (error) {
  console.error('Error fetching article:', error);
}

// Fallback nếu không có article
if (!article) {
  return Astro.redirect('/blog');
}

// Enhanced date formatting with validation
const formatDate = (dateString: string | undefined) => {
  if (!dateString) return 'Chưa có ngày';

  const date = new Date(dateString);
  if (isNaN(date.getTime())) return 'Ngày không hợp lệ';

  return date.toLocaleDateString('vi-VN', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

const formatDateISO = (dateString: string | undefined) => {
  if (!dateString) return new Date().toISOString();

  const date = new Date(dateString);
  if (isNaN(date.getTime())) return new Date().toISOString();

  return date.toISOString();
};

const publishedDate = formatDate(article.date);
const publishedDateISO = formatDateISO(article.date);

// Calculate reading time with validation
const calculateReadingTime = (content: string | undefined) => {
  if (!content) return 1;

  const wordsPerMinute = 200;
  const textContent = content.replace(/<[^>]*>/g, '');
  const wordCount = textContent.split(/\s+/).filter(word => word.length > 0).length;
  return Math.max(1, Math.ceil(wordCount / wordsPerMinute));
};

const readingTime = calculateReadingTime(article.content);

// SEO enhancements
const canonicalURL = new URL(`/blog/${slug}`, Astro.site);
const ogImage = article.image || '/images/og-default.jpg';

// Get author information from database
const getAuthorInfo = (article: any) => {
  const name = article.author || 'Tác giả';
  const email = article.authorEmail || 'contact@iq-test.com';

  // Fix: Chỉ fallback khi thực sự không có bio từ database
  const bio = (article.authorBio !== null && article.authorBio !== undefined)
    ? article.authorBio
    : `${name} là tác giả chuyên viết về công nghệ và phát triển cá nhân.`;

  // Use real social links from database, fallback to empty object
  const social = article.authorSocialLinks || {};

  return { name, email, bio, social };
};

const authorInfo = getAuthorInfo(article);
---

<BaseLayout
  title={`${article.title} | Blog IQ Test`}
  description={article.excerpt}
  keywords={article.tags?.join(', ')}
  ogImage={ogImage}
  canonicalURL={canonicalURL.href}
  type="article"
>
  <!-- Enhanced SEO Meta Tags -->
  <meta slot="head" property="article:published_time" content={publishedDateISO} />
  <meta slot="head" property="article:author" content={article.author} />
  <meta slot="head" property="article:section" content={article.category} />
  {article.tags?.map(tag => (
    <meta slot="head" property="article:tag" content={tag} />
  ))}

  <!-- Dynamic JSON-LD Structured Data based on Schema Type -->
  <script slot="head" type="application/ld+json" set:html={JSON.stringify((() => {
    const baseSchema = {
      "@context": "https://schema.org",
      "@type": article.schema_type || "Article",
      "headline": article.title,
      "description": article.excerpt,
      "image": ogImage,
      "author": {
        "@type": "Person",
        "name": authorInfo.name,
        "email": authorInfo.email,
        "description": authorInfo.bio,
        "url": authorInfo.social.website
      },
      "publisher": {
        "@type": "Organization",
        "name": "IQ Test",
        "logo": {
          "@type": "ImageObject",
          "url": "/images/logo.png"
        }
      },
      "datePublished": publishedDateISO,
      "dateModified": article.updated_at ? formatDateISO(article.updated_at) : publishedDateISO,
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": canonicalURL.href
      }
    };

    // Enhance schema based on type
    switch (article.schema_type) {
      case 'HowTo':
        return {
          ...baseSchema,
          "totalTime": `PT${readingTime}M`,
          "estimatedCost": {
            "@type": "MonetaryAmount",
            "currency": "VND",
            "value": "0"
          },
          "step": [
            {
              "@type": "HowToStep",
              "name": "Đọc hướng dẫn",
              "text": article.excerpt,
              "url": canonicalURL.href
            }
          ]
        };

      case 'Recipe':
        return {
          ...baseSchema,
          "recipeCategory": article.category,
          "cookTime": `PT${readingTime}M`,
          "prepTime": "PT5M",
          "totalTime": `PT${readingTime + 5}M`,
          "recipeYield": "1 serving",
          "nutrition": {
            "@type": "NutritionInformation",
            "calories": "Varies"
          }
        };

      case 'Review':
        return {
          ...baseSchema,
          "itemReviewed": {
            "@type": "Thing",
            "name": article.title.replace(/Review|Đánh giá/gi, '').trim()
          },
          "reviewRating": {
            "@type": "Rating",
            "ratingValue": "4.5",
            "bestRating": "5"
          },
          "reviewBody": article.excerpt
        };

      case 'NewsArticle':
        return {
          ...baseSchema,
          "datelineLocation": "Vietnam",
          "articleSection": article.category
        };

      case 'TechArticle':
        return {
          ...baseSchema,
          "dependencies": "Basic knowledge",
          "proficiencyLevel": "Beginner to Intermediate",
          "applicationCategory": "Technology"
        };

      case 'FAQPage':
        return {
          ...baseSchema,
          "@type": "FAQPage",
          "mainEntity": [
            {
              "@type": "Question",
              "name": article.title,
              "acceptedAnswer": {
                "@type": "Answer",
                "text": article.excerpt
              }
            }
          ]
        };

      default:
        return baseSchema;
    }
  })())} />

  <!-- Progress Bar -->
  <div id="reading-progress" class="fixed top-0 left-0 w-full h-1 bg-gray-200 dark:bg-gray-700 z-50">
    <div class="h-full bg-gradient-to-r from-blue-500 to-purple-600" style="width: 0%"></div>
  </div>

  <article class="min-h-screen bg-white dark:bg-gray-900">
    <!-- European Minimalist Header -->
    <header class="relative bg-white dark:bg-gray-900">
      <div class="max-w-6xl mx-auto px-6 sm:px-8 lg:px-12 py-16 md:py-20">

        <!-- Modern Professional Breadcrumb -->
        <nav class="mb-8" aria-label="Breadcrumb">
          <div class="flex items-center text-sm">
            <!-- Beautiful Home Icon with Hover Effect -->
            <a
              href="/"
              class="group flex items-center p-1.5 -ml-1.5 rounded-lg text-gray-500 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-950/30 transition-all duration-300"
              title="Trang chủ"
            >
              <!-- Beautiful Home Icon - Simple & Elegant -->
              <svg class="w-4 h-4 transition-transform duration-300 group-hover:scale-110" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"/>
              </svg>

              <!-- Optional text label for accessibility -->
              <span class="sr-only">Trang chủ</span>
            </a>

            <!-- Compact Separator -->
            <div class="flex items-center mx-1.5">
              <svg class="w-3 h-3 text-gray-300 dark:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </div>

            <!-- Category Link with Compact Styling -->
            <a
              href={`/blog/category/${encodeURIComponent(article.category)}`}
              class="px-2 py-1 rounded-md text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-950/30 font-medium transition-all duration-300"
              title={`Danh mục: ${article.category}`}
            >
              {article.category}
            </a>

            <!-- Compact Separator -->
            <div class="flex items-center mx-1.5">
              <svg class="w-3 h-3 text-gray-300 dark:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </div>

            <!-- Current Article with Compact Styling -->
            <span class="text-gray-800 dark:text-gray-200 font-semibold truncate max-w-md lg:max-w-lg xl:max-w-xl">
              {article.title}
            </span>
          </div>
        </nav>

        <!-- Title -->
        <h1 class="text-3xl md:text-4xl lg:text-5xl font-light text-gray-900 dark:text-white mb-8 leading-tight tracking-wide">
          {article.title}
        </h1>

        <!-- Meta Information -->
        <div class="flex flex-wrap items-center gap-6 text-sm text-gray-600 dark:text-gray-400 mb-12">
          <div class="flex items-center gap-2">
            <div class="w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded-full flex items-center justify-center text-xs font-medium text-gray-700 dark:text-gray-300">
              {article.authorAvatar || article.author.charAt(0).toUpperCase()}
            </div>
            <span class="font-medium">{article.author}</span>
          </div>

          <div class="flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            <time datetime={publishedDateISO}>{publishedDate}</time>
          </div>

          <div class="flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>{readingTime} min read</span>
          </div>
        </div>

        <!-- Featured Image -->
        {article.image && article.image !== '/api/placeholder/400/240' && (
          <div class="relative mb-12">
            <img
              src={article.image}
              alt={article.imageAlt || article.title}
              class="w-full h-64 md:h-80 lg:h-96 object-cover rounded-lg"
            />
          </div>
        )}

        <!-- Subtle Divider -->
        <div class="w-16 h-px bg-gray-300 dark:bg-gray-600 mb-8"></div>

      </div>
    </header>



    <!-- Article Content - Premium Typography -->
    <main class="relative bg-white dark:bg-gray-900">
      <div class="max-w-6xl mx-auto px-6 sm:px-8 lg:px-12">
        <!-- Content Container with Refined Styling -->
        <div class="max-w-4xl mx-auto">
          <div class="prose prose-lg md:prose-xl dark:prose-invert max-w-none
                      prose-headings:font-bold prose-headings:text-gray-900 dark:prose-headings:text-white prose-headings:tracking-tight
                      prose-p:text-gray-700 dark:prose-p:text-gray-300 prose-p:leading-relaxed prose-p:font-light
                      prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-a:no-underline prose-a:font-medium hover:prose-a:underline
                      prose-strong:text-gray-900 dark:prose-strong:text-white prose-strong:font-semibold
                      prose-code:text-pink-600 dark:prose-code:text-pink-400 prose-code:bg-gray-100 dark:prose-code:bg-gray-800 prose-code:px-2 prose-code:py-1 prose-code:rounded-md prose-code:font-medium
                      prose-blockquote:border-l-4 prose-blockquote:border-blue-500 prose-blockquote:bg-blue-50/50 dark:prose-blockquote:bg-blue-950/20 prose-blockquote:py-6 prose-blockquote:px-8 prose-blockquote:rounded-r-xl prose-blockquote:font-medium prose-blockquote:italic
                      prose-ul:list-disc prose-ul:space-y-2 prose-ul:pl-6 prose-ol:list-decimal prose-ol:space-y-2 prose-ol:pl-6 prose-li:text-gray-700 dark:prose-li:text-gray-300 prose-li:marker:text-gray-500 dark:prose-li:marker:text-gray-400
                      prose-img:shadow-lg prose-img:rounded-none
                      prose-hr:border-gray-200 dark:prose-hr:border-gray-700 prose-hr:my-12">

            <div class="article-content" set:html={article.content}></div>

          </div>
        </div>
      </div>
    </main>

    <!-- Tags & Social Share - Compact Professional -->
    <section class="bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-800">
      <div class="max-w-6xl mx-auto px-6 sm:px-8 lg:px-12 py-8">
        <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">
          <!-- Tags Section -->
          {article.tags && article.tags.length > 0 && (
            <div class="flex items-center gap-4">
              <span class="text-sm font-medium text-gray-500 dark:text-gray-400 whitespace-nowrap">
                Tags:
              </span>
              <div class="flex flex-wrap gap-2">
                {article.tags.map((tag: string) => (
                  <a
                    href={`/blog/tag/${encodeURIComponent(tag)}`}
                    class="inline-flex items-center px-3 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 text-sm rounded-md hover:bg-blue-100 dark:hover:bg-blue-900/30 hover:text-blue-700 dark:hover:text-blue-300"
                  >
                    {tag}
                  </a>
                ))}
              </div>
            </div>
          )}

          <!-- Social Share Section -->
          <div class="flex items-center gap-4">
            <span class="text-sm font-medium text-gray-500 dark:text-gray-400 whitespace-nowrap">
              Share:
            </span>
            <div class="flex items-center gap-2">
              <button
                onclick={`window.open('https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(canonicalURL.href)}', '_blank', 'width=600,height=400')`}
                class="w-8 h-8 bg-blue-600 hover:bg-blue-700 text-white rounded-md flex items-center justify-center"
                title="Share on Facebook"
              >
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                </svg>
              </button>
              <button
                onclick={`window.open('https://twitter.com/intent/tweet?url=${encodeURIComponent(canonicalURL.href)}&text=${encodeURIComponent(article.title)}', '_blank', 'width=600,height=400')`}
                class="w-8 h-8 bg-sky-500 hover:bg-sky-600 text-white rounded-md flex items-center justify-center"
                title="Share on Twitter"
              >
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
                </svg>
              </button>
              <button
                onclick={`navigator.clipboard.writeText('${canonicalURL.href}').then(() => {
                  const btn = this;
                  const originalHTML = btn.innerHTML;
                  btn.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>';
                  setTimeout(() => btn.innerHTML = originalHTML, 2000);
                })`}
                class="w-8 h-8 bg-gray-600 hover:bg-gray-700 text-white rounded-md flex items-center justify-center"
                title="Copy link"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Author Bio - Elegant & Professional -->
    <section class="relative bg-gradient-to-br from-slate-50/50 via-white to-blue-50/30 dark:from-slate-900/50 dark:via-gray-900 dark:to-blue-950/30 py-16 border-t border-gray-200/50 dark:border-gray-700/50">
      <div class="max-w-6xl mx-auto px-6 sm:px-8 lg:px-12">
        <div class="relative bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-3xl p-8 md:p-10 border border-gray-200/50 dark:border-gray-700/50">
          <!-- Decorative Element -->
          <div class="absolute top-0 left-8 w-16 h-1 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full"></div>

          <!-- Mobile-Optimized Layout -->
          <div class="space-y-6">
            <!-- Avatar & Name Row - Always Horizontal -->
            <div class="flex items-center gap-4">
              <!-- Avatar - Enhanced -->
              <div class="relative flex-shrink-0">
                <div class="w-16 h-16 sm:w-20 sm:h-20 rounded-2xl bg-gradient-to-br from-blue-500 via-purple-500 to-indigo-600 flex items-center justify-center shadow-2xl shadow-blue-500/25">
                  <span class="text-white font-bold text-lg sm:text-2xl">
                    {authorInfo.name.charAt(0).toUpperCase()}
                  </span>
                </div>
                <!-- Status indicator -->
                <div class="absolute -bottom-1 -right-1 w-5 h-5 sm:w-6 sm:h-6 bg-green-500 rounded-full border-2 sm:border-3 border-white dark:border-gray-800 shadow-lg"></div>
              </div>

              <!-- Author Name & Title -->
              <div class="flex-1 min-w-0">
                <h3 class="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white mb-1 tracking-tight">
                  {authorInfo.name}
                </h3>
                <p class="text-blue-600 dark:text-blue-400 font-medium text-xs sm:text-sm uppercase tracking-wider">
                  Tác giả
                </p>
              </div>
            </div>

            <!-- Bio -->
            <p class="text-gray-700 dark:text-gray-300 text-sm sm:text-base leading-relaxed font-light">
              {authorInfo.bio}
            </p>

            <!-- Social Links & Contact -->
            <div class="flex flex-wrap items-center gap-3 sm:gap-4">
              <!-- Social Icons -->
              <div class="flex items-center gap-2 sm:gap-3">
                <SocialLinks socialLinks={authorInfo.social} size="md" />
              </div>

              <!-- Email Contact -->
              <a
                href={`mailto:${authorInfo.email}`}
                class="inline-flex items-center gap-2 px-3 py-2 sm:px-4 sm:py-2 bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-xl hover:scale-105 font-medium text-xs sm:text-sm"
                title={`Email: ${authorInfo.email}`}
              >
                <svg class="w-3 h-3 sm:w-4 sm:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                </svg>
                Liên hệ
              </a>
            </div>
          </div>
          </div>
        </div>
      </div>
    </section>



    <!-- Related Articles - Compact Professional -->
    {relatedArticles.length > 0 && (
      <section class="bg-gray-50 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-800">
        <div class="max-w-6xl mx-auto px-6 sm:px-8 lg:px-12 py-12">
          <!-- Section Header -->
          <h2 class="text-2xl font-semibold text-gray-900 dark:text-white mb-8">
            Related Articles
          </h2>

          <!-- Articles Grid -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {relatedArticles.map((relatedArticle) => (
              <article class="group bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-md">
                <a href={`/blog/${relatedArticle.slug}`} class="block">
                  {relatedArticle.image && (
                    <div class="relative h-48 overflow-hidden">
                      <img
                        src={relatedArticle.image}
                        alt={relatedArticle.title}
                        class="w-full h-full object-cover group-hover:scale-105"
                      />
                      <!-- Category badge -->
                      <div class="absolute top-3 left-3">
                        <span class="px-2 py-1 bg-blue-600 text-white text-xs font-medium rounded">
                          {relatedArticle.category}
                        </span>
                      </div>
                    </div>
                  )}

                  <div class="p-4">
                    <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2 leading-tight group-hover:text-blue-600 dark:group-hover:text-blue-400 line-clamp-2">
                      {relatedArticle.title}
                    </h3>

                    <p class="text-gray-600 dark:text-gray-300 text-sm mb-4 line-clamp-2">
                      {relatedArticle.excerpt}
                    </p>

                    <!-- Meta info -->
                    <div class="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
                      <time datetime={formatDateISO(relatedArticle.date)}>
                        {formatDate(relatedArticle.date)}
                      </time>
                      <span>{calculateReadingTime(relatedArticle.content)} min read</span>
                    </div>
                  </div>
                </a>
              </article>
            ))}
          </div>
        </div>
      </section>
    )}


  </article>

  <!-- ✅ Track article view -->
  <ArticleViewScript articleId={article.id} delay={500} />

  <!-- Enhanced JavaScript Features -->
  <script>
    // Reading Progress Bar
    function updateReadingProgress() {
      const article = document.querySelector('main');
      const progressBar = document.querySelector('#reading-progress div');

      if (!article || !progressBar) return;

      const articleTop = article.offsetTop;
      const articleHeight = article.offsetHeight;
      const windowHeight = window.innerHeight;
      const scrollTop = window.pageYOffset;

      const progress = Math.min(
        Math.max((scrollTop - articleTop + windowHeight * 0.3) / articleHeight, 0),
        1
      );

      progressBar.style.width = `${progress * 100}%`;
    }

    // Copy link functionality
    function copyToClipboard(text) {
      if (navigator.clipboard) {
        navigator.clipboard.writeText(text).then(() => {
          showNotification('Đã sao chép link!');
        });
      } else {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        showNotification('Đã sao chép link!');
      }
    }

    // Show notification
    function showNotification(message) {
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform translate-x-full';
      notification.textContent = message;
      document.body.appendChild(notification);

      setTimeout(() => {
        notification.classList.remove('translate-x-full');
      }, 100);

      setTimeout(() => {
        notification.classList.add('translate-x-full');
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 2000);
    }

    // Initialize features
    document.addEventListener('DOMContentLoaded', function() {
      updateReadingProgress();

      // Update progress on scroll
      window.addEventListener('scroll', updateReadingProgress);

      // Add copy functionality to copy buttons
      document.querySelectorAll('[title="Sao chép link"]').forEach(button => {
        button.addEventListener('click', () => {
          copyToClipboard(window.location.href);
        });
      });


    });
  </script>
</BaseLayout>

