---
// Comprehensive test page for new users feature
import { AdminService } from '../backend';

let testResults = {
  apiTest: { success: false, data: null, error: null },
  cacheTest: { success: false, message: '' },
  performanceTest: { success: false, loadTime: 0 },
  accessibilityChecks: [],
  overallStatus: 'PENDING'
};

try {
  console.log('üß™ Testing New Users Feature...');
  
  // Test 1: API Functionality
  const startTime = Date.now();
  const { data, error } = await AdminService.getNewUsersStats();
  const loadTime = Date.now() - startTime;
  
  if (error) {
    testResults.apiTest.error = error;
  } else {
    testResults.apiTest.success = true;
    testResults.apiTest.data = data;
  }
  
  // Test 2: Performance
  testResults.performanceTest.loadTime = loadTime;
  testResults.performanceTest.success = loadTime < 3000; // Should load within 3 seconds
  
  // Test 3: Cache functionality
  const startTime2 = Date.now();
  const { data: cachedData } = await AdminService.getNewUsersStats();
  const cachedLoadTime = Date.now() - startTime2;
  
  testResults.cacheTest.success = cachedLoadTime < loadTime;
  testResults.cacheTest.message = `First load: ${loadTime}ms, Cached load: ${cachedLoadTime}ms`;
  
  // Test 4: Data validation
  const dataValidation = {
    hasData: !!data,
    hasDailyData: !!(data?.dailyData && data.dailyData.length > 0),
    hasTotalUsers: typeof data?.totalNewUsers === 'number',
    dailyDataStructure: data?.dailyData?.every(day => 
      typeof day.date === 'string' &&
      typeof day.registeredUsers === 'number' &&
      typeof day.anonymousUsers === 'number' &&
      typeof day.total === 'number'
    )
  };
  
  // Accessibility checks
  testResults.accessibilityChecks = [
    { check: 'API returns valid data structure', passed: dataValidation.hasData && dataValidation.hasDailyData },
    { check: 'Daily data has correct structure', passed: dataValidation.dailyDataStructure },
    { check: 'Total users is a number', passed: dataValidation.hasTotalUsers },
    { check: 'Performance is acceptable', passed: testResults.performanceTest.success },
    { check: 'Caching works', passed: testResults.cacheTest.success }
  ];
  
  // Overall status
  const allTestsPassed = testResults.apiTest.success && 
                        testResults.performanceTest.success && 
                        testResults.cacheTest.success &&
                        testResults.accessibilityChecks.every(check => check.passed);
  
  testResults.overallStatus = allTestsPassed ? 'PASS' : 'FAIL';
  
} catch (err) {
  testResults.apiTest.error = err;
  testResults.overallStatus = 'ERROR';
}
---

<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Test New Users Feature</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
    .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    .status-pass { color: #10b981; font-weight: bold; }
    .status-fail { color: #ef4444; font-weight: bold; }
    .status-error { color: #f59e0b; font-weight: bold; }
    .test-section { margin: 20px 0; padding: 15px; border: 1px solid #e5e7eb; border-radius: 6px; }
    .test-item { display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f3f4f6; }
    .test-item:last-child { border-bottom: none; }
    .badge { padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold; }
    .badge-pass { background: #d1fae5; color: #065f46; }
    .badge-fail { background: #fee2e2; color: #991b1b; }
    pre { background: #f9fafb; padding: 10px; border-radius: 4px; overflow-x: auto; font-size: 12px; }
    .summary { text-align: center; padding: 20px; margin: 20px 0; border-radius: 8px; }
    .summary-pass { background: #d1fae5; color: #065f46; }
    .summary-fail { background: #fee2e2; color: #991b1b; }
    .summary-error { background: #fef3c7; color: #92400e; }
  </style>
</head>
<body>
  <div class="container">
    <h1>üß™ New Users Feature Test Results</h1>
    
    <!-- Overall Status -->
    <div class={`summary summary-${testResults.overallStatus.toLowerCase()}`}>
      <h2>Overall Status: 
        <span class={`status-${testResults.overallStatus.toLowerCase()}`}>
          {testResults.overallStatus}
        </span>
      </h2>
      {testResults.overallStatus === 'PASS' && (
        <p>‚úÖ All tests passed! The new users feature is ready for production.</p>
      )}
      {testResults.overallStatus === 'FAIL' && (
        <p>‚ùå Some tests failed. Please review the issues below.</p>
      )}
      {testResults.overallStatus === 'ERROR' && (
        <p>‚ö†Ô∏è An error occurred during testing. Please check the error details.</p>
      )}
    </div>

    <!-- API Test -->
    <div class="test-section">
      <h3>üì° API Functionality Test</h3>
      <div class="test-item">
        <span>API Response</span>
        <span class={`badge ${testResults.apiTest.success ? 'badge-pass' : 'badge-fail'}`}>
          {testResults.apiTest.success ? 'PASS' : 'FAIL'}
        </span>
      </div>
      {testResults.apiTest.success && testResults.apiTest.data && (
        <div>
          <p><strong>Total New Users:</strong> {testResults.apiTest.data.totalNewUsers}</p>
          <p><strong>Daily Data Points:</strong> {testResults.apiTest.data.dailyData?.length || 0}</p>
        </div>
      )}
      {testResults.apiTest.error && (
        <pre>{JSON.stringify(testResults.apiTest.error, null, 2)}</pre>
      )}
    </div>

    <!-- Performance Test -->
    <div class="test-section">
      <h3>‚ö° Performance Test</h3>
      <div class="test-item">
        <span>Load Time</span>
        <span class={`badge ${testResults.performanceTest.success ? 'badge-pass' : 'badge-fail'}`}>
          {testResults.performanceTest.loadTime}ms
        </span>
      </div>
      <p>Target: &lt; 3000ms | Actual: {testResults.performanceTest.loadTime}ms</p>
    </div>

    <!-- Cache Test -->
    <div class="test-section">
      <h3>üíæ Cache Test</h3>
      <div class="test-item">
        <span>Cache Performance</span>
        <span class={`badge ${testResults.cacheTest.success ? 'badge-pass' : 'badge-fail'}`}>
          {testResults.cacheTest.success ? 'PASS' : 'FAIL'}
        </span>
      </div>
      <p>{testResults.cacheTest.message}</p>
    </div>

    <!-- Validation Checks -->
    <div class="test-section">
      <h3>‚úÖ Validation Checks</h3>
      {testResults.accessibilityChecks.map(check => (
        <div class="test-item">
          <span>{check.check}</span>
          <span class={`badge ${check.passed ? 'badge-pass' : 'badge-fail'}`}>
            {check.passed ? 'PASS' : 'FAIL'}
          </span>
        </div>
      ))}
    </div>

    <!-- Feature Checklist -->
    <div class="test-section">
      <h3>üìã Feature Checklist</h3>
      <div class="test-item">
        <span>‚úÖ API endpoint implemented</span>
        <span class="badge badge-pass">DONE</span>
      </div>
      <div class="test-item">
        <span>‚úÖ React component with Recharts</span>
        <span class="badge badge-pass">DONE</span>
      </div>
      <div class="test-item">
        <span>‚úÖ Dark mode support</span>
        <span class="badge badge-pass">DONE</span>
      </div>
      <div class="test-item">
        <span>‚úÖ Responsive design</span>
        <span class="badge badge-pass">DONE</span>
      </div>
      <div class="test-item">
        <span>‚úÖ Export functionality (CSV/JSON)</span>
        <span class="badge badge-pass">DONE</span>
      </div>
      <div class="test-item">
        <span>‚úÖ Error handling & retry logic</span>
        <span class="badge badge-pass">DONE</span>
      </div>
      <div class="test-item">
        <span>‚úÖ Accessibility features</span>
        <span class="badge badge-pass">DONE</span>
      </div>
      <div class="test-item">
        <span>‚úÖ Performance optimization</span>
        <span class="badge badge-pass">DONE</span>
      </div>
      <div class="test-item">
        <span>‚úÖ Caching mechanism</span>
        <span class="badge badge-pass">DONE</span>
      </div>
    </div>

    <hr style="margin: 30px 0;">
    <p style="text-align: center;">
      <a href="/admin" style="color: #3b82f6; text-decoration: none;">‚Üê Quay l·∫°i Admin Dashboard</a>
    </p>
  </div>
</body>
</html>
