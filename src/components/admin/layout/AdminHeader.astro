---
export interface Props {
  title?: string;
  breadcrumbs?: Array<{ label: string; href?: string }>;
}

const { title = 'Dashboard', breadcrumbs = [] } = Astro.props;
---

<header class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 h-16 flex items-center justify-between px-4 lg:px-6">
  
  <!-- Left Section -->
  <div class="flex items-center space-x-4">
    <!-- Mobile Menu Toggle -->
    <button
      id="mobile-menu-toggle"
      class="lg:hidden flex items-center justify-center w-8 h-8 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg"
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
    </button>

    <!-- Breadcrumbs -->
    <nav class="flex items-center space-x-2 text-sm">
      {breadcrumbs.length > 0 ? (
        <>
          {breadcrumbs.map((crumb, index) => (
            <Fragment key={index}>
              {crumb.href ? (
                <a 
                  href={crumb.href}
                  class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                >
                  {crumb.label}
                </a>
              ) : (
                <span class="text-gray-900 dark:text-gray-100 font-medium">
                  {crumb.label}
                </span>
              )}
              {index < breadcrumbs.length - 1 && (
                <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              )}
            </Fragment>
          ))}
        </>
      ) : (
        <h1 class="text-xl font-semibold text-gray-900 dark:text-gray-100">
          {title}
        </h1>
      )}
    </nav>
  </div>

  <!-- Right Section -->
  <div class="flex items-center space-x-3">
    
    <!-- Search -->
    <div class="hidden md:block relative">
      <input
        type="text"
        placeholder="Tìm kiếm..."
        class="w-64 pl-10 pr-4 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      />
      <svg class="absolute left-3 top-2.5 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
    </div>

    <!-- Notifications -->
    <div class="relative">
      <button
        id="notifications-toggle"
        class="relative flex items-center justify-center w-8 h-8 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM11 19H6.334c-.706 0-1.334-.895-1.334-2V9c0-3.866 3.582-7 8-7s8 3.134 8 7v8c0 1.105-.628 2-1.334 2H15"></path>
        </svg>
        <span class="absolute -top-1 -right-1 w-4 h-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
          3
        </span>
      </button>

      <!-- Notifications Dropdown -->
      <div id="notifications-dropdown" class="absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50 hidden">
        <div class="p-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-sm font-semibold text-gray-900 dark:text-gray-100">Thông báo</h3>
        </div>
        <div class="max-h-64 overflow-y-auto">
          <div class="p-4 border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 bg-blue-50 dark:bg-blue-900/20">
            <div class="flex items-start space-x-3">
              <div class="w-2 h-2 rounded-full mt-2 bg-blue-500"></div>
              <div class="flex-1">
                <p class="text-sm text-gray-900 dark:text-gray-100">Người dùng mới đăng ký</p>
                <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">2 phút trước</p>
              </div>
            </div>
          </div>
          <div class="p-4 border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 bg-blue-50 dark:bg-blue-900/20">
            <div class="flex items-start space-x-3">
              <div class="w-2 h-2 rounded-full mt-2 bg-blue-500"></div>
              <div class="flex-1">
                <p class="text-sm text-gray-900 dark:text-gray-100">Test IQ được hoàn thành</p>
                <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">5 phút trước</p>
              </div>
            </div>
          </div>
          <div class="p-4 border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700">
            <div class="flex items-start space-x-3">
              <div class="w-2 h-2 rounded-full mt-2 bg-gray-300"></div>
              <div class="flex-1">
                <p class="text-sm text-gray-900 dark:text-gray-100">Cập nhật hệ thống</p>
                <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">1 giờ trước</p>
              </div>
            </div>
          </div>
        </div>
        <div class="p-3 border-t border-gray-200 dark:border-gray-700">
          <a
            href="/admin/notifications"
            class="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium"
          >
            Xem tất cả thông báo
          </a>
        </div>
      </div>
    </div>

    <!-- User Menu -->
    <div class="relative">
      <button
        id="user-menu-toggle"
        class="flex items-center space-x-2 p-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg"
      >
        <div class="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
          <span id="admin-avatar" class="text-white text-sm font-medium">A</span>
        </div>
        <span id="admin-name" class="hidden md:block font-medium truncate max-w-32">admin</span>
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </button>

      <!-- User Dropdown -->
      <div id="user-dropdown" class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50 hidden">
        <div class="p-3 border-b border-gray-200 dark:border-gray-700">
          <div id="admin-info-loading" class="animate-pulse hidden">
            <div class="h-4 bg-gray-300 dark:bg-gray-600 rounded mb-2"></div>
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-20"></div>
          </div>
          <div id="admin-info-content">
            <p id="admin-email" class="text-sm font-medium text-gray-900 dark:text-gray-100 truncate">admin@example.com</p>
            <span id="admin-role" class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">Quản trị viên</span>
          </div>
        </div>
        
        <div class="py-1">
          <a
            href="/admin/profile"
            class="flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            Hồ sơ
          </a>
          
          <a
            href="/admin/settings"
            class="flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
            Cài đặt
          </a>
        </div>
        
        <div class="border-t border-gray-200 dark:border-gray-700 py-1">
          <button
            id="logout-btn"
            class="flex items-center w-full px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/30"
          >
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
            </svg>
            Đăng xuất
          </button>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
    const notificationsToggle = document.getElementById('notifications-toggle');
    const notificationsDropdown = document.getElementById('notifications-dropdown');
    const userMenuToggle = document.getElementById('user-menu-toggle');
    const userDropdown = document.getElementById('user-dropdown');
    const logoutBtn = document.getElementById('logout-btn');

    // Mobile menu toggle
    mobileMenuToggle?.addEventListener('click', function() {
      if (window.adminSidebar) {
        window.adminSidebar.toggleMobile();
      }
    });

    // Notifications dropdown
    notificationsToggle?.addEventListener('click', function(e) {
      e.stopPropagation();
      notificationsDropdown?.classList.toggle('hidden');
      userDropdown?.classList.add('hidden');
    });

    // User menu dropdown
    userMenuToggle?.addEventListener('click', function(e) {
      e.stopPropagation();
      userDropdown?.classList.toggle('hidden');
      notificationsDropdown?.classList.add('hidden');
    });

    // Close dropdowns when clicking outside
    document.addEventListener('click', function() {
      notificationsDropdown?.classList.add('hidden');
      userDropdown?.classList.add('hidden');
    });

    // Logout functionality
    logoutBtn?.addEventListener('click', async function() {
      try {
        // Import centralized Supabase client
        const { supabase } = await import('@/backend');

        // Sign out from Supabase
        await supabase.auth.signOut();

        // Clear localStorage
        localStorage.removeItem('admin_token');
        localStorage.removeItem('admin_email');

        // Redirect to login
        window.location.href = '/admin/login';
      } catch (error) {
        console.error('AdminHeader: Error during logout:', error);
        // Force redirect even if logout fails
        localStorage.removeItem('admin_token');
        localStorage.removeItem('admin_email');
        window.location.href = '/admin/login';
      }
    });

    // Prevent dropdown close when clicking inside
    [notificationsDropdown, userDropdown].forEach(dropdown => {
      dropdown?.addEventListener('click', function(e) {
        e.stopPropagation();
      });
    });

    // Fetch real admin info - SIMPLIFIED
    async function fetchAdminInfo() {
      const adminAvatar = document.getElementById('admin-avatar');
      const adminName = document.getElementById('admin-name');
      const adminEmail = document.getElementById('admin-email');
      const adminRole = document.getElementById('admin-role');

      try {
        // Import centralized Supabase client
        const { supabase } = await import('@/backend');

        // Get current user (silent check)
        const { data: { user }, error: userError } = await supabase.auth.getUser();

        // If no user or error, use fallback silently
        if (!user || userError) {
          console.log('AdminHeader: No authenticated user, using fallback');
          const fallbackEmail = localStorage.getItem('admin_email') || 'admin@example.com';
          const fallbackName = fallbackEmail.split('@')[0];

          if (adminAvatar) adminAvatar.textContent = fallbackName.charAt(0).toUpperCase();
          if (adminName) adminName.textContent = fallbackName;
          if (adminEmail) adminEmail.textContent = fallbackEmail;
          if (adminRole) adminRole.textContent = 'Quản trị viên';
          return;
        }

        // Get user profile
        const { data: profile } = await supabase
          .from('user_profiles')
          .select('full_name, role')
          .eq('id', user.id)
          .single();

        const adminInfo = {
          email: user.email || 'admin@example.com',
          fullName: profile?.full_name || user.email?.split('@')[0] || 'Admin',
          role: profile?.role || 'admin'
        };

        // Update UI elements
        if (adminAvatar) adminAvatar.textContent = adminInfo.fullName.charAt(0).toUpperCase();
        if (adminName) adminName.textContent = adminInfo.fullName;
        if (adminEmail) adminEmail.textContent = adminInfo.email;
        if (adminRole) adminRole.textContent = adminInfo.role === 'admin' ? 'Quản trị viên' : adminInfo.role;

      } catch (error) {
        console.log('AdminHeader: Using fallback admin info');

        // Fallback to localStorage (silent)
        const fallbackEmail = localStorage.getItem('admin_email') || 'admin@example.com';
        const fallbackName = fallbackEmail.split('@')[0];

        if (adminAvatar) adminAvatar.textContent = fallbackName.charAt(0).toUpperCase();
        if (adminName) adminName.textContent = fallbackName;
        if (adminEmail) adminEmail.textContent = fallbackEmail;
        if (adminRole) adminRole.textContent = 'Quản trị viên';
      }
    }

    // Fetch admin info on page load
    fetchAdminInfo();
  });
</script>
