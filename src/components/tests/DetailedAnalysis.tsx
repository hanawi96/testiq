import React, { useState } from 'react';
import { motion } from 'framer-motion';

interface AnalysisProps {
  score: number;
  percentile: number;
  timeTaken: number;
  accuracy: number;
}

const DetailedAnalysis: React.FC<AnalysisProps> = ({ score, percentile, timeTaken, accuracy }) => {
  const [activeInsight, setActiveInsight] = useState(0);
  
  // Performance analysis
  const getPerformanceInsights = () => {
    const insights = [];
    
    if (accuracy > 90) {
      insights.push({
        type: 'strength',
        title: 'ƒê·ªô ch√≠nh x√°c xu·∫•t s·∫Øc',
        description: 'B·∫°n c√≥ kh·∫£ nƒÉng t·∫≠p trung cao v√† √≠t m·∫Øc l·ªói sai s√≥t',
        icon: 'üéØ',
        color: 'green'
      });
    }
    
    if (timeTaken < 1200) { // < 20 minutes
      insights.push({
        type: 'strength', 
        title: 'T·ªëc ƒë·ªô x·ª≠ l√Ω nhanh',
        description: 'B·∫°n c√≥ kh·∫£ nƒÉng ƒë∆∞a ra quy·∫øt ƒë·ªãnh nhanh ch√≥ng v√† ch√≠nh x√°c',
        icon: '‚ö°',
        color: 'yellow'
      });
    }
    
    if (score >= 130) {
      insights.push({
        type: 'strength',
        title: 'Tr√≠ tu·ªá v∆∞·ª£t tr·ªôi',
        description: 'Ch·ªâ c√≥ 2% d√¢n s·ªë ƒë·∫°t ƒë∆∞·ª£c m·ª©c IQ nh∆∞ b·∫°n',
        icon: 'üåü',
        color: 'purple'
      });
    }
    
    insights.push({
      type: 'improvement',
      title: 'Ph√°t tri·ªÉn t∆∞ duy s√°ng t·∫°o',
      description: 'Th·ª≠ c√°c ho·∫°t ƒë·ªông ngh·ªá thu·∫≠t ƒë·ªÉ k√≠ch th√≠ch n√£o ph·∫£i',
      icon: 'üé®',
      color: 'pink'
    });
    
    return insights;
  };

  // Learning recommendations
  const getLearningRecommendations = () => [
    {
      category: 'ƒê·ªçc s√°ch',
      items: [
        'üìö "Thinking, Fast and Slow" - Daniel Kahneman',
        'üìö "Peak" - Anders Ericsson', 
        'üìö "The Art of Problem Solving" - Russell Ackoff'
      ],
      color: 'blue'
    },
    {
      category: '·ª®ng d·ª•ng luy·ªán t·∫≠p',
      items: [
        'üì± Lumosity - Brain training games',
        'üì± Peak - Brain games & puzzles',
        'üì± Elevate - Brain training exercises'
      ],
      color: 'green'
    },
    {
      category: 'Ho·∫°t ƒë·ªông h√†ng ng√†y',
      items: [
        'üß© Gi·∫£i Sudoku & crossword puzzles',
        '‚ôüÔ∏è Ch∆°i c·ªù vua ho·∫∑c c·ªù t∆∞·ªõng',
        'üéÆ Strategy games & logic puzzles'
      ],
      color: 'purple'
    }
  ];

  // Lifestyle tips
  const getLifestyleTips = () => [
    {
      icon: 'ü•ó',
      title: 'Dinh d∆∞·ª°ng n√£o b·ªô',
      tips: ['Omega-3 t·ª´ c√° h·ªìi', 'Qu·∫£ √≥c ch√≥ & h·∫°nh nh√¢n', 'Qu·∫£ vi·ªát qu·∫•t', 'Tr√† xanh']
    },
    {
      icon: 'üí™',
      title: 'Th·ªÉ d·ª•c cho n√£o',
      tips: ['Ch·∫°y b·ªô 30 ph√∫t/ng√†y', 'Yoga & thi·ªÅn ƒë·ªãnh', 'B√†i t·∫≠p cardio', 'Ng·ªß ƒë·ªß 7-8 gi·ªù']
    },
    {
      icon: 'üßò',
      title: 'R√®n luy·ªán tinh th·∫ßn',
      tips: ['Thi·ªÅn 10 ph√∫t/ng√†y', 'Vi·∫øt nh·∫≠t k√Ω', 'H·ªçc ng√¥n ng·ªØ m·ªõi', 'Luy·ªán nh·∫°c c·ª•']
    }
  ];

  const insights = getPerformanceInsights();
  const recommendations = getLearningRecommendations();
  const lifestyleTips = getLifestyleTips();

  const PerformanceChart = () => (
    <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100">
      <h3 className="text-lg font-bold text-gray-900 mb-6 flex items-center">
        <span className="mr-2">üìä</span>
        So s√°nh v·ªõi c·ªông ƒë·ªìng
      </h3>
      
      <div className="space-y-4">
        {[
          { label: 'Thi√™n t√†i (140+)', percent: 2, isUser: score >= 140 },
          { label: 'Xu·∫•t s·∫Øc (130-139)', percent: 6, isUser: score >= 130 && score < 140 },
          { label: 'Tr√™n TB (115-129)', percent: 14, isUser: score >= 115 && score < 130 },
          { label: 'Trung b√¨nh (85-114)', percent: 68, isUser: score >= 85 && score < 115 },
          { label: 'D∆∞·ªõi TB (<85)', percent: 10, isUser: score < 85 }
        ].map((item, index) => (
          <div key={index} className="flex items-center">
            <div className="w-32 text-sm text-gray-600">{item.label}</div>
            <div className="flex-1 mx-4 h-4 bg-gray-200 rounded-full relative overflow-hidden">
              <motion.div 
                className="h-full bg-gradient-to-r from-blue-400 to-blue-600 rounded-full"
                initial={{ width: 0 }}
                animate={{ width: `${item.percent}%` }}
                transition={{ delay: index * 0.1, duration: 0.8 }}
              />
              {item.isUser && (
                <motion.div 
                  className="absolute top-0 right-0 w-4 h-4 bg-red-500 rounded-full transform translate-x-2 -translate-y-0"
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ delay: 1 + index * 0.1 }}
                />
              )}
            </div>
            <div className="w-12 text-sm font-medium text-gray-900">{item.percent}%</div>
          </div>
        ))}
      </div>
      
      <div className="mt-6 p-4 bg-blue-50 rounded-xl">
        <div className="flex items-center space-x-2 text-blue-800">
          <span className="text-xl">üéØ</span>
          <span className="font-semibold">V·ªã tr√≠ c·ªßa b·∫°n:</span>
        </div>
        <p className="text-blue-700 mt-1">
          Top {100 - percentile}% to√†n c·∫ßu - Th√¥ng minh h∆°n {percentile}% d√¢n s·ªë th·∫ø gi·ªõi
        </p>
      </div>
    </div>
  );

  const InsightsSection = () => (
    <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100">
      <h3 className="text-lg font-bold text-gray-900 mb-6 flex items-center">
        <span className="mr-2">üí°</span>
        Ph√¢n t√≠ch chuy√™n s√¢u
      </h3>
      
      <div className="grid md:grid-cols-2 gap-4">
        {insights.map((insight, index) => (
          <motion.div 
            key={index}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className={`p-4 rounded-xl border-l-4 border-${insight.color}-500 bg-${insight.color}-50`}
          >
            <div className="flex items-start space-x-3">
              <span className="text-2xl">{insight.icon}</span>
              <div>
                <h4 className={`font-semibold text-${insight.color}-800`}>{insight.title}</h4>
                <p className={`text-sm text-${insight.color}-700 mt-1`}>{insight.description}</p>
              </div>
            </div>
          </motion.div>
        ))}
      </div>
    </div>
  );

  const RecommendationsSection = () => (
    <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100">
      <h3 className="text-lg font-bold text-gray-900 mb-6 flex items-center">
        <span className="mr-2">üöÄ</span>
        L·ªô tr√¨nh ph√°t tri·ªÉn
      </h3>
      
      <div className="grid md:grid-cols-3 gap-6">
        {recommendations.map((rec, index) => (
          <motion.div 
            key={index}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: index * 0.2 }}
            className={`p-4 rounded-xl bg-${rec.color}-50 border border-${rec.color}-200`}
          >
            <h4 className={`font-semibold text-${rec.color}-800 mb-3`}>{rec.category}</h4>
            <ul className="space-y-2">
              {rec.items.map((item, i) => (
                <li key={i} className={`text-sm text-${rec.color}-700 flex items-start`}>
                  <span className="mr-2 text-xs">‚Ä¢</span>
                  <span>{item}</span>
                </li>
              ))}
            </ul>
          </motion.div>
        ))}
      </div>
    </div>
  );

  const LifestyleSection = () => (
    <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100">
      <h3 className="text-lg font-bold text-gray-900 mb-6 flex items-center">
        <span className="mr-2">üå±</span>
        L·ªëi s·ªëng t·ªëi ∆∞u h√≥a tr√≠ n√£o
      </h3>
      
      <div className="grid md:grid-cols-3 gap-6">
        {lifestyleTips.map((tip, index) => (
          <motion.div 
            key={index}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className="text-center"
          >
            <div className="text-4xl mb-3">{tip.icon}</div>
            <h4 className="font-semibold text-gray-900 mb-3">{tip.title}</h4>
            <ul className="space-y-2">
              {tip.tips.map((item, i) => (
                <li key={i} className="text-sm text-gray-600">
                  {item}
                </li>
              ))}
            </ul>
          </motion.div>
        ))}
      </div>
    </div>
  );

  return (
    <div className="space-y-6">
      <PerformanceChart />
      <InsightsSection />
      <RecommendationsSection />
      <LifestyleSection />
    </div>
  );
};

export default DetailedAnalysis; 