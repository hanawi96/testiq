/**
 * Hook qu·∫£n l√Ω c√°c c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi trong IQ Test
 */
import { useState, useCallback, useEffect } from 'react';
import type { Question } from '../../../../../utils/test';

interface UseIQQuestionManagerProps {
  questions: Question[];
  initialQuestion?: number;
  initialAnswers?: (number | null)[];
  playSound?: (type: 'correct' | 'wrong' | 'warning' | 'complete') => void;
  isTimeUp?: boolean;
  isReviewMode?: boolean;
}

export function useIQQuestionManager({
  questions,
  initialQuestion = 0,
  initialAnswers,
  playSound,
  isTimeUp = false,
  isReviewMode = false
}: UseIQQuestionManagerProps) {
  const [currentQuestion, setCurrentQuestion] = useState(initialQuestion);
  const [answers, setAnswers] = useState<(number | null)[]>(
    initialAnswers || new Array(questions.length).fill(null)
  );
  const [justAnswered, setJustAnswered] = useState(false);
  const [highlightedAnswer, setHighlightedAnswer] = useState<number | null>(null);
  
  // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ c√°c c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi
  const allAnswered = useCallback(() => {
    return answers.every(a => a !== null);
  }, [answers]);

  // T√¨m c√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi ti·∫øp theo
  const findNextUnanswered = useCallback((fromIndex: number = 0): number => {
    // T√¨m t·ª´ v·ªã tr√≠ hi·ªán t·∫°i ƒë·∫øn cu·ªëi
    for (let i = fromIndex; i < answers.length; i++) {
      if (answers[i] === null) return i;
    }
    // N·∫øu kh√¥ng t√¨m th·∫•y v√† fromIndex > 0, t√¨m t·ª´ ƒë·∫ßu ƒë·∫øn v·ªã tr√≠ hi·ªán t·∫°i
    if (fromIndex > 0) {
      for (let i = 0; i < fromIndex; i++) {
        if (answers[i] === null) return i;
      }
    }
    return -1; // T·∫•t c·∫£ ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi
  }, [answers]);

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn c√¢u tr·∫£ l·ªùi
  const handleAnswerSelect = useCallback((answerIndex: number) => {
    // NgƒÉn vi·ªác ch·ªçn ƒë√°p √°n n·∫øu ƒë√£ h·∫øt th·ªùi gian
    if (isTimeUp) {
      console.log('‚è∞ Cannot select answer - time is up!');
      return;
    }
    
    console.log(`üéØ handleAnswerSelect: question=${currentQuestion}, answer=${answerIndex}`);
    
    // C·∫≠p nh·∫≠t c√¢u tr·∫£ l·ªùi
    const newAnswers = [...answers];
    newAnswers[currentQuestion] = answerIndex;
    setAnswers(newAnswers);
    setJustAnswered(true);
    
    // Ph·∫£n h·ªìi ngay l·∫≠p t·ª©c
    if (playSound) {
      const question = questions[currentQuestion];
      if (question) {
        const isCorrect = answerIndex === question.correct;
        playSound(isCorrect ? 'correct' : 'wrong');
        
        // Ph·∫£n h·ªìi rung cho thi·∫øt b·ªã di ƒë·ªông
        if (navigator.vibrate) {
          navigator.vibrate(isCorrect ? 50 : 100);
        }
      }
    }
    
    // T·ª± ƒë·ªông chuy·ªÉn c√¢u h·ªèi ti·∫øp theo sau khi tr·∫£ l·ªùi
    if (!isReviewMode) {
      // ƒê·ª£i 600ms ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y ƒë∆∞·ª£c ph·∫£n h·ªìi v·ªÅ c√¢u tr·∫£ l·ªùi
      setTimeout(() => {
        // T√¨m c√¢u h·ªèi ti·∫øp theo ch∆∞a tr·∫£ l·ªùi
        const nextUnanswered = findNextUnanswered(currentQuestion + 1);
        if (nextUnanswered !== -1) {
          // C√≥ c√¢u h·ªèi ti·∫øp theo ch∆∞a tr·∫£ l·ªùi
          setCurrentQuestion(nextUnanswered);
          setJustAnswered(false);
          setHighlightedAnswer(null);
          console.log('üîÑ Auto advancing to next unanswered question:', nextUnanswered);
        } else if (currentQuestion < questions.length - 1) {
          // Kh√¥ng c√≥ c√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi nh∆∞ng ch∆∞a ph·∫£i c√¢u cu·ªëi c√πng
          // Chuy·ªÉn sang c√¢u k·∫ø ti·∫øp
          setCurrentQuestion(currentQuestion + 1);
          setJustAnswered(false);
          setHighlightedAnswer(null);
          console.log('üîÑ Auto advancing to next question:', currentQuestion + 1);
        }
      }, 600);
    }
  }, [answers, currentQuestion, isTimeUp, playSound, questions, isReviewMode, findNextUnanswered]);

  // Chuy·ªÉn ƒë·∫øn c√¢u h·ªèi ti·∫øp theo
  const nextQuestion = useCallback(() => {
    if (isReviewMode) {
      // Trong ch·∫ø ƒë·ªô xem l·∫°i, ƒë∆°n gi·∫£n l√† di chuy·ªÉn ƒë·∫øn c√¢u ti·∫øp theo
      const nextQuestion = (currentQuestion + 1) % questions.length;
      setCurrentQuestion(nextQuestion);
      setJustAnswered(false);
      setHighlightedAnswer(null); // X√≥a highlight
      console.log('‚û°Ô∏è Review mode: Moving to next question:', nextQuestion);
    } else {
      // Trong ch·∫ø ƒë·ªô l√†m b√†i, t√¨m c√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi ti·∫øp theo
      const nextUnanswered = findNextUnanswered(currentQuestion + 1);
      if (nextUnanswered !== -1) {
        setCurrentQuestion(nextUnanswered);
        setJustAnswered(false);
        setHighlightedAnswer(null); // X√≥a highlight
        console.log('‚û°Ô∏è Normal mode: Moving to next unanswered question:', nextUnanswered);
      }
    }
  }, [currentQuestion, findNextUnanswered, isReviewMode, questions.length]);

  // Quay l·∫°i c√¢u h·ªèi tr∆∞·ªõc
  const previousQuestion = useCallback(() => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
      setJustAnswered(false);
      setHighlightedAnswer(null); // X√≥a highlight
      console.log('‚¨ÖÔ∏è Moving to previous question:', currentQuestion - 1);
    } else if (isReviewMode) {
      // Trong ch·∫ø ƒë·ªô xem l·∫°i, n·∫øu ƒëang ·ªü c√¢u ƒë·∫ßu ti√™n th√¨ quay l·∫°i c√¢u cu·ªëi c√πng
      setCurrentQuestion(questions.length - 1);
      setJustAnswered(false);
      setHighlightedAnswer(null);
      console.log('‚¨ÖÔ∏è Review mode: Wrapping to last question:', questions.length - 1);
    }
  }, [currentQuestion, isReviewMode, questions.length]);

  // Nh·∫£y ƒë·∫øn c√¢u h·ªèi c·ª• th·ªÉ
  const jumpToQuestion = useCallback((questionIndex: number) => {
    if (questionIndex >= 0 && questionIndex < questions.length) {
      setCurrentQuestion(questionIndex);
      setJustAnswered(false);
      setHighlightedAnswer(null); // X√≥a highlight
    }
  }, [questions.length]);

  // Reset tr·∫°ng th√°i c√¢u h·ªèi
  const resetQuestionState = useCallback(() => {
    setCurrentQuestion(0);
    setAnswers(new Array(questions.length).fill(null));
    setJustAnswered(false);
    setHighlightedAnswer(null);
  }, [questions.length]);

  return {
    currentQuestion,
    setCurrentQuestion,
    answers,
    setAnswers,
    justAnswered,
    setJustAnswered,
    highlightedAnswer,
    setHighlightedAnswer,
    allAnswered: allAnswered(),
    handleAnswerSelect,
    nextQuestion,
    previousQuestion,
    jumpToQuestion,
    resetQuestionState,
    findNextUnanswered
  };
} 